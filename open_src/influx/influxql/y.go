// Code generated by goyacc sql.y. DO NOT EDIT.

//line sql.y:2
/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package influxql

//line sql.y:18

import (
	"fmt"
	__yyfmt__ "fmt"
	"regexp"
	"sort"
	"strings"
	"time"
	"unsafe"

	"github.com/openGemini/openGemini/open_src/vm/protoparser/influx"
)

const DefaultQueryTimeout = time.Duration(0)

func setParseTree(yylex interface{}, stmts Statements) {
	for _, stmt := range stmts {
		yylex.(*YyParser).Query.Statements = append(yylex.(*YyParser).Query.Statements, stmt)
	}
}

func deal_Fill(fill interface{}) (FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

//line sql.y:66
type yySymType struct {
	yys              int
	stmt             Statement
	stmts            Statements
	str              string
	query            Query
	field            *Field
	fields           Fields
	sources          Sources
	source           Source
	sortfs           SortFields
	sortf            *SortField
	ment             *Measurement
	subQuery         *SubQuery
	dimens           Dimensions
	dimen            *Dimension
	int              int
	int64            int64
	float64          float64
	dataType         DataType
	expr             Expr
	tdur             time.Duration
	tdurs            []time.Duration
	bool             bool
	groupByCondition *GroupByCondition
	intSlice         []int
	inter            interface{}
	durations        *Durations
	hints            Hints
	strSlice         []string
	strSlices        [][]string
	location         *time.Location
	indexType        *IndexType
	cqsp             *cqSamplePolicyInfo
	fieldOption      *fieldList
	fieldOptions     []*fieldList
	indexOptions     []*IndexOption
	indexOption      *IndexOption
	databasePolicy   DatabasePolicy
}

const FROM = 57346
const MEASUREMENT = 57347
const INTO = 57348
const ON = 57349
const SELECT = 57350
const WHERE = 57351
const AS = 57352
const GROUP = 57353
const BY = 57354
const ORDER = 57355
const LIMIT = 57356
const OFFSET = 57357
const SLIMIT = 57358
const SOFFSET = 57359
const SHOW = 57360
const CREATE = 57361
const FULL = 57362
const PRIVILEGES = 57363
const OUTER = 57364
const JOIN = 57365
const TO = 57366
const IN = 57367
const NOT = 57368
const EXISTS = 57369
const REVOKE = 57370
const FILL = 57371
const DELETE = 57372
const WITH = 57373
const ENGINETYPE = 57374
const ALL = 57375
const PASSWORD = 57376
const NAME = 57377
const REPLICANUM = 57378
const ALTER = 57379
const USER = 57380
const USERS = 57381
const DATABASES = 57382
const DATABASE = 57383
const MEASUREMENTS = 57384
const RETENTION = 57385
const POLICIES = 57386
const POLICY = 57387
const DURATION = 57388
const DEFAULT = 57389
const SHARD = 57390
const INDEX = 57391
const GRANT = 57392
const HOT = 57393
const WARM = 57394
const TYPE = 57395
const SET = 57396
const FOR = 57397
const GRANTS = 57398
const REPLICATION = 57399
const SERIES = 57400
const DROP = 57401
const CASE = 57402
const WHEN = 57403
const THEN = 57404
const ELSE = 57405
const BEGIN = 57406
const END = 57407
const TRUE = 57408
const FALSE = 57409
const TAG = 57410
const ATTRIBUTE = 57411
const FIELD = 57412
const KEYS = 57413
const VALUES = 57414
const KEY = 57415
const EXPLAIN = 57416
const ANALYZE = 57417
const EXACT = 57418
const CARDINALITY = 57419
const SHARDKEY = 57420
const PRIMARYKEY = 57421
const SORTKEY = 57422
const PROPERTY = 57423
const CONTINUOUS = 57424
const DIAGNOSTICS = 57425
const QUERIES = 57426
const QUERIE = 57427
const SHARDS = 57428
const STATS = 57429
const SUBSCRIPTIONS = 57430
const SUBSCRIPTION = 57431
const GROUPS = 57432
const INDEXTYPE = 57433
const INDEXLIST = 57434
const SEGMENT = 57435
const KILL = 57436
const EVERY = 57437
const RESAMPLE = 57438
const DOWNSAMPLE = 57439
const DOWNSAMPLES = 57440
const SAMPLEINTERVAL = 57441
const TIMEINTERVAL = 57442
const STREAM = 57443
const DELAY = 57444
const STREAMS = 57445
const QUERY = 57446
const PARTITION = 57447
const TOKEN = 57448
const TOKENIZERS = 57449
const MATCH = 57450
const LIKE = 57451
const MATCHPHRASE = 57452
const REPLICAS = 57453
const DETAIL = 57454
const DESC = 57455
const ASC = 57456
const COMMA = 57457
const SEMICOLON = 57458
const LPAREN = 57459
const RPAREN = 57460
const REGEX = 57461
const EQ = 57462
const NEQ = 57463
const LT = 57464
const LTE = 57465
const GT = 57466
const GTE = 57467
const DOT = 57468
const DOUBLECOLON = 57469
const NEQREGEX = 57470
const EQREGEX = 57471
const IDENT = 57472
const INTEGER = 57473
const DURATIONVAL = 57474
const STRING = 57475
const NUMBER = 57476
const HINT = 57477
const BOUNDPARAM = 57478
const AND = 57479
const OR = 57480
const ADD = 57481
const SUB = 57482
const BITWISE_OR = 57483
const BITWISE_XOR = 57484
const MUL = 57485
const DIV = 57486
const MOD = 57487
const BITWISE_AND = 57488
const UMINUS = 57489

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"INTO",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"TO",
	"IN",
	"NOT",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ENGINETYPE",
	"ALL",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"ATTRIBUTE",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"PRIMARYKEY",
	"SORTKEY",
	"PROPERTY",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"SEGMENT",
	"KILL",
	"EVERY",
	"RESAMPLE",
	"DOWNSAMPLE",
	"DOWNSAMPLES",
	"SAMPLEINTERVAL",
	"TIMEINTERVAL",
	"STREAM",
	"DELAY",
	"STREAMS",
	"QUERY",
	"PARTITION",
	"TOKEN",
	"TOKENIZERS",
	"MATCH",
	"LIKE",
	"MATCHPHRASE",
	"REPLICAS",
	"DETAIL",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"BOUNDPARAM",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3044

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 427,
	109, 146,
	120, 146,
	121, 146,
	122, 146,
	123, 146,
	124, 146,
	125, 146,
	128, 146,
	129, 146,
	-2, 135,
}

const yyPrivate = 57344

const yyLast = 1059

var yyAct = [...]int16{
	406, 814, 849, 459, 758, 386, 806, 632, 648, 769,
	674, 654, 497, 357, 641, 4, 565, 569, 513, 123,
	614, 552, 213, 580, 498, 384, 72, 186, 68, 403,
	64, 80, 447, 161, 294, 223, 209, 2, 291, 156,
	254, 143, 144, 148, 149, 74, 816, 207, 551, 137,
	458, 78, 79, 145, 146, 150, 147, 143, 144, 148,
	149, 145, 146, 150, 147, 143, 144, 148, 149, 817,
	82, 78, 79, 74, 509, 815, 133, 818, 566, 78,
	79, 657, 355, 567, 194, 833, 646, 317, 318, 812,
	427, 726, 727, 828, 658, 728, 139, 774, 151, 764,
	155, 763, 69, 256, 82, 317, 318, 716, 52, 317,
	318, 193, 192, 788, 194, 70, 76, 73, 77, 75,
	164, 81, 205, 82, 82, 71, 193, 858, 67, 194,
	69, 715, 82, 197, 522, 624, 76, 187, 77, 75,
	188, 81, 206, 70, 76, 73, 77, 75, 235, 81,
	699, 583, 244, 71, 224, 245, 188, 317, 318, 188,
	74, 610, 609, 608, 607, 493, 78, 79, 142, 777,
	188, 241, 246, 247, 248, 249, 250, 251, 252, 253,
	289, 267, 265, 255, 271, 82, 239, 663, 224, 240,
	450, 259, 408, 260, 662, 52, 407, 263, 264, 187,
	273, 274, 275, 507, 74, 282, 505, 496, 494, 287,
	78, 79, 212, 82, 82, 397, 306, 69, 237, 82,
	185, 185, 304, 200, 184, 184, 159, 187, 187, 759,
	70, 76, 73, 77, 75, 480, 81, 375, 320, 479,
	71, 374, 305, 67, 319, 130, 581, 582, 770, 316,
	315, 454, 455, 258, 585, 584, 732, 499, 350, 457,
	456, 69, 676, 82, 145, 146, 150, 147, 143, 144,
	148, 149, 128, 642, 70, 76, 73, 77, 75, 65,
	81, 571, 723, 616, 71, 361, 506, 67, 281, 689,
	360, 353, 280, 364, 366, 157, 377, 145, 146, 150,
	147, 143, 144, 148, 149, 651, 362, 382, 650, 637,
	596, 370, 595, 372, 559, 558, 550, 642, 379, 548,
	380, 321, 322, 547, 545, 543, 432, 433, 409, 383,
	531, 530, 188, 529, 526, 524, 508, 495, 336, 430,
	425, 426, 131, 188, 482, 188, 224, 224, 451, 328,
	329, 330, 331, 332, 333, 444, 224, 335, 334, 419,
	443, 421, 440, 434, 439, 464, 420, 359, 349, 129,
	348, 449, 347, 344, 463, 343, 342, 339, 337, 310,
	470, 484, 466, 467, 452, 469, 309, 308, 307, 303,
	483, 302, 478, 301, 296, 288, 285, 468, 268, 487,
	489, 490, 261, 473, 201, 476, 199, 519, 195, 182,
	180, 492, 485, 152, 730, 491, 141, 152, 154, 153,
	412, 211, 154, 153, 594, 122, 154, 153, 520, 413,
	481, 528, 504, 418, 516, 410, 521, 373, 523, 300,
	188, 854, 188, 525, 536, 618, 446, 539, 799, 82,
	544, 798, 855, 843, 188, 74, 832, 831, 542, 535,
	829, 78, 79, 63, 319, 423, 781, 572, 771, 766,
	533, 722, 576, 557, 721, 719, 718, 643, 568, 639,
	638, 630, 555, 577, 619, 573, 538, 597, 560, 561,
	424, 414, 352, 848, 190, 605, 591, 592, 797, 574,
	575, 796, 731, 678, 653, 599, 600, 631, 602, 537,
	431, 593, 69, 428, 82, 326, 621, 325, 323, 299,
	601, 578, 603, 604, 617, 70, 76, 73, 77, 75,
	183, 81, 649, 63, 314, 71, 312, 853, 67, 196,
	830, 644, 645, 790, 741, 623, 729, 720, 627, 226,
	666, 667, 188, 640, 665, 656, 622, 620, 606, 541,
	540, 532, 140, 238, 188, 292, 652, 160, 295, 647,
	398, 661, 839, 827, 700, 202, 189, 660, 669, 670,
	635, 74, 135, 634, 841, 767, 659, 78, 79, 629,
	270, 811, 176, 677, 606, 705, 177, 688, 845, 836,
	673, 512, 295, 672, 191, 693, 668, 695, 696, 712,
	685, 293, 824, 684, 760, 162, 679, 680, 690, 707,
	437, 378, 709, 703, 686, 687, 706, 371, 671, 313,
	369, 697, 691, 692, 286, 694, 704, 108, 435, 708,
	82, 311, 649, 283, 284, 293, 701, 511, 272, 711,
	162, 70, 76, 73, 77, 75, 743, 81, 52, 717,
	510, 71, 714, 278, 279, 224, 351, 702, 174, 175,
	107, 683, 738, 105, 733, 106, 167, 168, 169, 682,
	171, 736, 172, 737, 276, 277, 589, 740, 579, 742,
	748, 749, 739, 472, 399, 751, 752, 775, 753, 363,
	365, 367, 773, 724, 746, 295, 744, 745, 376, 625,
	793, 626, 734, 381, 109, 757, 556, 710, 747, 165,
	166, 765, 242, 750, 243, 132, 762, 354, 3, 110,
	656, 262, 159, 111, 754, 768, 393, 396, 794, 394,
	395, 772, 236, 515, 779, 173, 761, 698, 518, 633,
	612, 786, 780, 778, 787, 503, 502, 501, 389, 390,
	500, 659, 792, 225, 783, 784, 789, 782, 163, 387,
	391, 393, 396, 791, 394, 395, 198, 181, 401, 785,
	388, 127, 801, 134, 776, 124, 800, 795, 465, 805,
	218, 217, 136, 124, 807, 808, 474, 713, 477, 125,
	809, 392, 802, 813, 681, 486, 488, 820, 821, 124,
	613, 588, 587, 807, 822, 527, 803, 804, 471, 126,
	475, 266, 402, 834, 74, 338, 117, 297, 840, 837,
	78, 79, 842, 553, 324, 819, 368, 429, 546, 441,
	847, 846, 438, 227, 340, 422, 851, 756, 233, 755,
	852, 231, 735, 664, 851, 857, 856, 228, 358, 115,
	229, 341, 112, 554, 114, 232, 563, 564, 124, 116,
	460, 461, 219, 462, 220, 124, 448, 358, 92, 113,
	125, 215, 534, 82, 125, 52, 346, 636, 162, 345,
	436, 417, 416, 415, 216, 76, 73, 77, 75, 586,
	81, 411, 590, 118, 71, 103, 400, 269, 234, 230,
	204, 598, 87, 83, 203, 84, 85, 179, 119, 120,
	178, 94, 121, 138, 514, 356, 549, 52, 445, 91,
	442, 86, 124, 170, 405, 404, 628, 53, 54, 615,
	844, 88, 850, 90, 835, 823, 825, 59, 89, 56,
	838, 102, 99, 100, 101, 95, 57, 98, 826, 93,
	675, 385, 725, 562, 655, 570, 257, 810, 327, 58,
	517, 96, 52, 61, 158, 222, 97, 221, 55, 214,
	453, 208, 53, 54, 210, 1, 66, 51, 50, 49,
	298, 48, 59, 60, 56, 47, 46, 45, 44, 43,
	42, 57, 41, 104, 40, 39, 38, 37, 36, 35,
	34, 33, 32, 62, 58, 31, 30, 29, 61, 28,
	27, 26, 25, 55, 24, 23, 20, 19, 21, 18,
	22, 17, 16, 15, 13, 14, 212, 12, 60, 11,
	611, 7, 10, 9, 8, 290, 6, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62,
}

var yyPact = [...]int16{
	964, -1000, 417, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 144, 873, 632, 821, 871, 776, 239, 212,
	650, 749, 478, 964, 917, 395, 447, 289, 158, 13,
	300, 13, -1000, -1000, 165, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 455, 881, 724, 643, -1000, 605, 929,
	609, 690, 592, -1000, 502, 512, 913, 910, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 280, 732, 279, 94, 472,
	487, -19, 278, 871, 731, 276, 92, 274, 471, 907,
	903, -19, 875, -1000, 95, 764, 718, 94, 836, 902,
	844, 901, 877, -1000, 687, 87, -1000, 928, 95, 917,
	395, 654, 22, 13, 13, 13, 13, 13, 13, 13,
	13, -78, -15, 123, 272, -1000, 668, 671, 671, 764,
	-1000, 790, 268, 900, 871, 571, 881, 881, 608, 587,
	162, 881, 567, 266, 557, 881, -1000, -1000, 265, -19,
	534, 264, 796, 402, 313, 263, -1000, -1000, -1000, 261,
	259, 395, 917, -1000, -1000, -1000, 875, -1000, 258, -1000,
	-1000, -1000, 257, 256, 249, -1000, -1000, -1000, 526, 514,
	-1000, -1000, 919, -50, -1000, 764, 296, 401, 807, 400,
	398, -1000, -1000, 229, -86, 248, 794, 247, 837, 246,
	245, 243, 882, 242, 240, -1000, 238, -1000, 875, -1000,
	928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -102, -102,
	-102, -1000, -1000, -102, -1000, 374, -1000, -1000, -1000, -1000,
	-1000, -1000, 13, 664, -1000, 20, 920, 845, -1000, 237,
	875, 845, 881, 871, 871, 805, 553, 881, 550, 881,
	311, 111, 864, 544, 881, -1000, 881, 871, -1000, -1000,
	500, -1000, 723, 84, 459, 625, 899, 744, 791, -19,
	66, 309, 894, 303, 373, 886, -1000, 885, 884, 307,
	-1000, 95, 236, 95, 822, 347, 372, 764, 764, -78,
	-28, 396, 812, 877, 393, -19, -19, 521, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 883, 542, 818,
	234, 232, -1000, 815, 926, 230, 225, -1000, 924, 326,
	865, 875, -1000, 125, 218, 13, 131, 856, 861, -1000,
	845, 856, 871, 875, 865, 875, 845, 787, 620, 881,
	789, 881, 871, 109, 304, 214, 845, 856, 881, 871,
	871, 875, 865, -1000, -1000, 723, -1000, 33, 77, 207,
	76, -1000, 127, 714, 711, 710, 709, 637, 75, 156,
	206, -59, 569, 694, -19, 701, -19, 302, 4, -1000,
	4, 205, 395, 204, 784, 877, 203, 201, 200, -1000,
	446, -1000, 95, 872, -1000, -1000, -1000, -1000, 100, 392,
	368, 877, 445, 444, -1000, 764, 195, 127, 194, 814,
	-1000, 193, 189, 922, -1000, 186, -85, 804, 851, 865,
	-1000, 651, -86, 875, 185, 184, 330, 330, -1000, 850,
	-53, -53, 151, 856, -1000, 875, 865, 865, 856, 845,
	856, 615, 126, 781, 780, 613, 871, 875, 865, 298,
	182, 180, -1000, 856, -1000, 871, 875, 865, 875, 865,
	865, 856, -1000, -1000, -1000, -1000, -1000, 443, -1000, -1000,
	32, 31, 30, 29, -1000, -1000, -1000, -1000, 704, 779,
	153, 127, 325, 366, 442, -19, -1000, 441, 5, 641,
	4, -1000, -1000, -1000, 493, 363, 390, 703, 481, -1000,
	-1000, -1000, 95, 880, 179, 362, 361, 187, -1000, 359,
	-19, -19, -32, 723, 479, -1000, 178, -1000, -1000, 175,
	-1000, -1000, 845, 387, -49, 804, -1000, 845, -1000, -1000,
	-1000, -1000, -1000, 63, 56, 838, -1000, -1000, -1000, -1000,
	439, 437, -1000, 865, 856, 856, -1000, 856, -1000, 126,
	875, 132, 132, 386, 330, 330, 773, 606, 598, 126,
	875, 865, 865, 856, 159, -1000, -1000, -1000, 875, 865,
	865, 856, 865, 856, 856, -1000, 127, -1000, -1000, -1000,
	-1000, 700, 18, 541, 589, 153, 503, 479, -19, -1000,
	694, -19, -1000, -1000, 292, -1000, -1000, -1000, 653, 554,
	766, 395, -1000, -1, -25, -1000, 764, -1000, -1000, -1000,
	358, 357, 432, -1000, 356, 353, -1000, -1000, -1000, 152,
	-1000, -1000, 856, -39, -1000, 431, 287, 385, 129, -1000,
	845, 856, 835, -1000, -53, 151, -1000, -1000, 856, -1000,
	-1000, -1000, 875, 845, -1000, 429, -1000, -1000, 132, -1000,
	-1000, 583, 126, 126, 875, 865, 856, 856, -1000, -1000,
	865, 856, 856, -1000, 856, -1000, -1000, -1000, -1000, 677,
	828, 826, 127, -1000, -1000, 99, -1000, 536, -1000, 693,
	877, -31, -33, 703, 351, 486, -1000, -50, -1000, -1000,
	143, -1000, -1000, -1000, 118, 350, -1000, -1000, -1000, -49,
	634, -35, 629, 856, -1000, 38, -1000, -1000, -1000, 845,
	856, 132, 348, 126, 875, 875, 865, 856, -1000, -1000,
	856, -1000, -1000, -1000, -18, -1000, -1000, 479, -1000, 428,
	127, -19, 645, 683, -1000, -1000, 756, 384, -1000, -1000,
	381, -1000, -1000, -1000, 333, -1000, 118, -1000, 856, -1000,
	-1000, -1000, 875, 865, 865, 856, -1000, -1000, 688, -1000,
	99, 479, 498, -1000, -43, 703, -57, -87, -1000, -63,
	-1000, -1000, 865, 856, 856, -1000, -1000, 688, -1000, 533,
	467, -38, -1000, -1000, 342, 425, 339, 338, -47, 856,
	-1000, -1000, -1000, 519, 99, -1000, 465, -19, -1000, 484,
	-57, -1000, -1000, 335, -1000, 517, 99, -1000, -1000, -19,
	-1000, 376, -1000, -1000, -1000, -19, -1000, -1000, -57, -1000,
	422, 321, 334, -19, -4, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 728, 1047, 1046, 1045, 1044, 15, 1043, 1042, 1041,
	1040, 1039, 1037, 1035, 1034, 1033, 1032, 1031, 1030, 1029,
	1028, 1027, 1026, 1025, 1024, 1022, 23, 1021, 1020, 1019,
	1017, 1016, 1015, 1012, 1011, 1010, 1009, 1008, 1007, 1006,
	1005, 1004, 1002, 1000, 999, 7, 998, 997, 996, 995,
	991, 990, 989, 988, 987, 30, 14, 986, 985, 37,
	425, 47, 36, 49, 984, 27, 981, 421, 980, 19,
	979, 977, 22, 975, 26, 28, 35, 10, 974, 39,
	970, 968, 967, 966, 17, 13, 965, 32, 11, 964,
	50, 3, 963, 21, 962, 6, 5, 961, 25, 31,
	960, 33, 8, 24, 0, 958, 950, 948, 12, 4,
	946, 945, 944, 2, 942, 940, 9, 939, 20, 936,
	1, 16, 34, 935, 934, 29, 18, 924, 38,
}

var yyR1 = [...]uint8{
	0, 58, 59, 59, 59, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 55, 55, 57, 57, 57,
	57, 57, 57, 79, 79, 78, 56, 56, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 63, 63, 60, 61, 61, 61,
	61, 61, 61, 61, 64, 62, 62, 62, 66, 67,
	67, 67, 67, 67, 65, 65, 65, 87, 87, 88,
	88, 104, 104, 89, 89, 89, 89, 89, 89, 89,
	89, 116, 116, 93, 93, 94, 94, 94, 69, 69,
	71, 71, 70, 70, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 73, 76, 76, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 99, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 83, 83, 83,
	85, 85, 84, 84, 86, 86, 86, 90, 121, 121,
	91, 91, 91, 91, 92, 92, 92, 92, 2, 2,
	3, 3, 128, 128, 128, 128, 128, 122, 122, 4,
	98, 98, 97, 97, 97, 97, 97, 97, 97, 7,
	7, 68, 68, 68, 68, 8, 8, 9, 9, 5,
	5, 5, 10, 10, 95, 95, 96, 96, 96, 96,
	11, 11, 12, 14, 13, 13, 15, 15, 16, 17,
	19, 19, 19, 21, 21, 20, 20, 20, 22, 22,
	18, 23, 23, 107, 107, 107, 107, 107, 107, 52,
	52, 52, 52, 52, 101, 101, 24, 24, 25, 25,
	26, 26, 26, 26, 26, 77, 77, 100, 27, 27,
	28, 28, 28, 28, 29, 29, 29, 29, 30, 30,
	30, 30, 31, 31, 31, 31, 31, 51, 51, 126,
	126, 126, 127, 82, 82, 110, 105, 105, 106, 106,
	125, 125, 123, 80, 80, 124, 124, 117, 118, 118,
	109, 109, 102, 102, 111, 111, 112, 113, 113, 115,
	115, 114, 114, 114, 108, 108, 103, 32, 33, 34,
	35, 35, 35, 35, 36, 36, 36, 36, 37, 38,
	38, 39, 40, 41, 119, 119, 119, 119, 42, 43,
	44, 44, 44, 46, 46, 46, 46, 47, 47, 45,
	120, 120, 48, 48, 49, 49, 50, 53, 54,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 10, 11, 1, 3, 1, 3, 3,
	1, 3, 3, 1, 2, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 2,
	1, 1, 5, 6, 2, 0, 2, 1, 3, 1,
	3, 3, 5, 1, 6, 3, 5, 3, 1, 5,
	4, 4, 3, 1, 1, 1, 1, 3, 0, 1,
	3, 1, 1, 1, 3, 4, 6, 7, 1, 3,
	1, 4, 0, 4, 0, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 1, 3, 5, 5, 4, 6,
	6, 5, 6, 6, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	3, 0, 1, 3, 1, 2, 2, 2, 1, 1,
	4, 2, 2, 0, 4, 2, 2, 0, 2, 3,
	5, 4, 2, 1, 3, 3, 0, 3, 3, 2,
	1, 2, 1, 2, 2, 2, 2, 1, 2, 9,
	6, 2, 2, 2, 2, 5, 3, 7, 8, 6,
	9, 9, 5, 4, 1, 2, 3, 3, 3, 3,
	7, 6, 2, 3, 4, 3, 3, 2, 7, 6,
	6, 7, 6, 5, 4, 6, 7, 6, 5, 4,
	3, 8, 7, 1, 1, 1, 1, 1, 1, 4,
	8, 7, 7, 6, 2, 0, 7, 6, 11, 10,
	2, 2, 4, 2, 2, 1, 3, 1, 3, 2,
	10, 9, 9, 8, 13, 12, 12, 11, 10, 9,
	9, 8, 10, 8, 8, 4, 14, 4, 0, 3,
	1, 0, 7, 2, 0, 2, 2, 0, 2, 0,
	2, 1, 3, 2, 0, 3, 3, 3, 2, 0,
	1, 3, 2, 0, 2, 0, 2, 3, 1, 2,
	0, 3, 3, 0, 1, 3, 1, 3, 6, 4,
	9, 8, 8, 7, 9, 8, 8, 7, 2, 7,
	3, 3, 3, 10, 3, 3, 5, 0, 3, 6,
	9, 11, 7, 4, 6, 2, 4, 2, 4, 10,
	1, 3, 8, 6, 2, 4, 3, 2, 3,
}

var yyChk = [...]int16{
	-1000, -58, -59, -1, -6, -2, -3, -9, -5, -7,
	-8, -11, -12, -14, -13, -15, -16, -17, -19, -21,
	-22, -20, -18, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, -40,
	-41, -42, -43, -44, -46, -47, -48, -49, -50, -52,
	-53, -54, 8, 18, 19, 59, 30, 37, 50, 28,
	74, 54, 94, 116, -55, 135, -57, 143, -75, 117,
	130, 140, -74, 132, 60, 134, 131, 133, 66, 67,
	-99, 136, 119, 40, 42, 43, 58, 39, 68, -107,
	70, 56, 5, 86, 48, 82, 98, 103, 84, 79,
	80, 81, 78, 32, 130, 41, 43, 38, 5, 82,
	97, 101, 41, 58, 43, 38, 48, 5, 82, 97,
	98, 101, -60, -69, 4, 9, 43, 5, 33, 130,
	33, 130, 75, -6, 34, 104, -1, -63, 6, -55,
	115, 127, 10, 143, 144, 139, 140, 142, 145, 146,
	141, -75, 117, 127, 126, -75, -79, 130, -78, 61,
	112, -101, 7, 44, -101, 76, 77, 71, 72, 73,
	4, 71, 73, 55, 76, 77, 90, 84, 7, 7,
	130, 45, 130, -67, 130, 126, -65, 133, -99, 104,
	7, 117, -104, 130, 133, 130, -60, -69, 45, 130,
	131, 130, 104, 7, 7, -104, -69, -61, -66, -62,
	-64, -67, 117, -72, -70, 117, 130, 27, 26, 108,
	110, -71, -73, -76, -75, 45, -67, 7, 21, 24,
	7, 7, 21, 4, 7, -6, 55, 131, -60, -61,
	-63, -55, 68, 70, 130, 133, -75, -75, -75, -75,
	-75, -75, -75, -75, 118, -55, 118, -83, 130, 68,
	70, 130, 63, -79, -79, -72, 31, -69, 130, 7,
	-60, -69, 77, -101, -101, -101, 76, 77, 76, 77,
	130, 126, -101, 76, 77, 130, 77, -101, 130, -104,
	-4, -128, 31, 111, -122, 68, 130, 31, -51, 117,
	126, 130, 130, 130, -55, -63, -69, 130, 130, 130,
	130, 115, 10, 115, 20, -59, -62, 137, 138, -75,
	-72, 25, 26, 117, 27, 117, 117, -81, 120, 121,
	122, 123, 124, 125, 129, 128, 109, 130, 31, 130,
	7, 24, 130, 130, 130, 7, 4, 130, 130, 130,
	-69, -60, 118, -75, 63, 62, 5, -85, 13, 130,
	-69, -85, -101, -60, -69, -60, -69, -60, 31, 77,
	-101, 77, -101, 126, 130, 126, -60, -85, 77, -101,
	-101, -60, -69, -128, -98, -97, -96, 46, 57, 35,
	36, 47, 78, 48, 51, 52, 49, 131, 111, 69,
	7, 34, 31, -125, -123, -124, -104, 130, 126, -65,
	126, 7, 117, 126, 118, 7, 7, 7, 126, -61,
	130, -61, 23, 118, 118, -72, -72, 118, 117, 25,
	-6, 117, -104, -104, -76, 117, 7, 78, 24, 130,
	130, 24, 4, 130, 130, 4, 120, -87, 11, -69,
	65, 130, -75, -68, 120, 121, 129, 128, -90, -91,
	14, 15, 12, -85, -91, -60, -69, -69, -87, -69,
	-85, 31, 73, -101, -60, 31, -101, -60, -69, 130,
	126, 126, 130, -85, -91, -101, -60, -69, -60, -69,
	-69, -87, -98, 132, 131, 130, 131, -108, -103, 130,
	46, 46, 46, 46, -122, 131, 130, 47, 130, 133,
	91, 78, 32, -126, -127, 49, -125, -80, 47, -104,
	126, -65, 130, -65, 130, -55, 130, 31, -6, 130,
	130, 130, 115, -61, 10, -55, -6, 117, 118, -6,
	115, 115, -72, 130, -108, 130, 24, 130, 130, 4,
	130, 133, -93, 29, 12, -87, 65, -69, 130, 130,
	-99, -99, -92, 16, 17, -121, 131, 136, -121, -84,
	-86, 130, -91, -69, -87, -87, -91, -85, -90, 73,
	-26, 120, 121, 25, 129, 128, -60, 31, 31, 73,
	-60, -69, -69, -87, 126, 130, 130, -91, -60, -69,
	-69, -87, -69, -87, -87, -91, 115, 132, 132, 132,
	132, -10, 46, 31, -118, -117, 130, -108, 120, 118,
	115, -104, 115, -74, 130, 68, 70, -65, -119, 96,
	118, 117, -45, 46, 102, -61, 7, 130, 118, 118,
	-6, -56, 130, 118, -104, -104, 118, -98, -102, 53,
	130, 130, -85, 117, -88, -89, -104, 130, 143, -99,
	-93, -85, 131, 131, 15, 115, 113, 114, -87, -91,
	-91, -90, -26, -69, -77, -100, 130, -77, 117, -99,
	-99, 31, 73, 73, -26, -69, -87, -87, -91, 130,
	-69, -87, -87, -91, -87, -91, -91, -103, 47, 132,
	33, 105, 78, -102, -118, 92, -102, -104, -126, -104,
	64, 95, 55, 31, -55, 132, 132, -72, 118, 118,
	115, 118, 118, 130, -90, -94, 130, 131, 134, 115,
	127, 117, 127, -85, -90, 17, -121, -84, -91, -69,
	-85, 115, -77, 73, -26, -26, -69, -87, -91, -91,
	-87, -91, -91, -91, 57, 21, 21, -108, -109, 130,
	78, 53, -6, 132, 132, -45, 118, 99, -56, -116,
	130, 118, -88, 68, 132, 68, -90, 131, -85, -91,
	-77, 118, -26, -69, -69, -87, -91, -91, 131, -102,
	115, -108, -104, 65, 55, 31, 117, 117, 118, 115,
	-116, -91, -69, -87, -87, -91, -95, -96, -109, -102,
	-82, 93, 132, -45, -120, 132, 133, 132, 140, -87,
	-91, -91, -95, -111, 79, -110, -105, 106, 131, 118,
	115, 118, 118, 132, -91, -112, 80, -109, -106, 107,
	-104, 100, -120, 118, -115, 81, -109, -104, 117, -113,
	-114, -104, -120, 115, 120, 118, -113, -104, 131,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 3, 85, 0, 55, 57, 60, 0,
	157, 0, 80, 81, 0, 159, 160, 161, 162, 163,
	164, 166, 156, 188, 265, 0, 265, 232, 0, 0,
	0, 0, 0, 348, 0, 0, 367, 374, 377, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	365, 0, 129, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 4, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 63, 0,
	189, 129, 0, 216, 129, 0, 265, 265, 265, 0,
	0, 265, 0, 0, 0, 265, 351, 358, 0, 0,
	196, 0, 0, 298, 104, 0, 103, 105, 106, 0,
	0, 0, 85, 111, 112, 233, 129, 235, 0, 250,
	337, 352, 0, 0, 0, 376, 236, 86, 87, 89,
	93, 98, 0, 128, 134, 0, 157, 0, 0, 0,
	0, 132, 130, 0, 145, 0, 350, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 0, 378, 129, 84,
	0, 56, 58, 59, 61, 62, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 78, 158, 167, 168,
	169, 165, 0, 0, 64, 0, 0, 171, 264, 0,
	129, 171, 265, 129, 129, 0, 0, 265, 0, 265,
	259, 0, 171, 0, 265, 339, 265, 129, 368, 375,
	196, 191, 0, 0, 193, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 234, 0, 0, 363,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 0, 0, 0,
	0, 0, 244, 0, 0, 0, 0, 249, 0, 0,
	108, 129, 77, 0, 0, 0, 0, 183, 0, 215,
	171, 183, 129, 129, 108, 129, 171, 0, 0, 265,
	0, 265, 129, 0, 0, 0, 171, 183, 265, 129,
	129, 129, 108, 190, 199, 200, 202, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 192, 0, 0,
	0, 0, 0, 301, 311, 314, 0, 104, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	91, 90, 0, 95, 97, 131, 133, -2, 0, 0,
	0, 0, 0, 0, 144, 0, 0, 0, 0, 0,
	243, 0, 0, 0, 248, 0, 0, 124, 0, 108,
	82, 0, 65, 129, 0, 0, 0, 0, 210, 187,
	0, 0, 0, 183, 231, 129, 108, 108, 183, 171,
	183, 0, 0, 0, 0, 0, 129, 129, 108, 0,
	0, 0, 263, 183, 267, 129, 129, 108, 129, 108,
	108, 183, 201, 203, 204, 205, 206, 208, 334, 336,
	0, 0, 0, 0, 194, 195, 197, 198, 0, 219,
	319, 0, 0, 0, 300, 0, 310, 0, 0, 0,
	0, 101, 104, 100, 357, 0, 0, 0, 373, 239,
	359, 364, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 323, 240, 0, 242, 245, 0,
	247, 338, 171, 0, 0, 124, 83, 171, 211, 212,
	213, 214, 177, 0, 0, 181, 178, 179, 182, 170,
	172, 174, 230, 108, 183, 183, 347, 183, 252, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 108, 108, 183, 0, 261, 262, 266, 129, 108,
	108, 183, 108, 183, 183, 343, 0, 226, 227, 228,
	229, 217, 0, 0, 323, 319, 0, 323, 0, 297,
	301, 0, 312, 313, 157, 315, 316, 99, 0, 0,
	0, 0, 362, 0, 0, 92, 0, 96, 136, 137,
	0, 0, 66, 141, 0, 0, 146, 238, 349, 0,
	241, 246, 183, 0, 107, 109, 113, 111, 118, 120,
	171, 183, 185, 186, 0, 0, 175, 176, 183, 345,
	346, 251, 129, 171, 270, 275, 277, 271, 0, 273,
	274, 0, 0, 0, 129, 108, 183, 183, 283, 260,
	108, 183, 183, 291, 183, 341, 342, 335, 218, 0,
	0, 0, 0, 294, 318, 0, 293, 0, 299, 0,
	0, 0, 0, 0, 0, 0, 372, 94, 139, 140,
	0, 142, 143, 322, 122, 0, 125, 126, 127, 0,
	0, 0, 0, 183, 209, 0, 180, 173, 344, 171,
	183, 0, 0, 0, 129, 129, 108, 183, 281, 282,
	183, 289, 290, 340, 0, 220, 221, 323, 317, 320,
	0, 0, 0, 354, 355, 360, 0, 0, 67, 53,
	0, 123, 110, 114, 0, 119, 122, 184, 183, 269,
	276, 272, 129, 108, 108, 183, 280, 288, 223, 292,
	0, 323, 304, 353, 0, 0, 0, 0, 115, 0,
	54, 268, 108, 183, 183, 287, 222, 224, 321, 325,
	307, 0, 356, 361, 0, 370, 0, 0, 0, 183,
	285, 286, 225, 0, 0, 302, 309, 0, 303, 0,
	0, 121, 116, 0, 284, 330, 0, 324, 305, 0,
	306, 0, 371, 117, 296, 333, 326, 308, 0, 329,
	328, 0, 0, 333, 0, 369, 327, 331, 332,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:185
		{
			setParseTree(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:191
		{
			yyVAL.stmts = []Statement{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:195
		{

			if len(yyDollar[1].stmts) == 1 {
				yyVAL.stmts = yyDollar[1].stmts
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:204
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:212
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:216
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:220
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:224
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:228
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:232
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:236
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:240
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:244
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:248
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:252
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:256
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:260
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:264
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:268
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:272
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:276
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:288
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:292
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:296
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:304
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:308
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:316
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:324
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:328
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:332
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:336
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:340
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:352
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:356
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:360
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:364
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:384
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:388
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:392
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:406
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Sources = yyDollar[4].sources
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[8].sortfs
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			stmt.SLimit = yyDollar[9].intSlice[2]
			stmt.SOffset = yyDollar[9].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[7].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[10].location
			if len(yyDollar[3].sources) > 1 {
				yylex.Error("into caluse only support one measurement")
			} else if len(yyDollar[3].sources) == 1 {
				mst, ok := yyDollar[3].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into caluse only support measurement caluse")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 54:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:446
		{
			stmt := &SelectStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Fields = yyDollar[3].fields
			stmt.Sources = yyDollar[5].sources
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			stmt.SLimit = yyDollar[10].intSlice[2]
			stmt.SOffset = yyDollar[10].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[8].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[11].location
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into caluse only support one measurement")
			} else if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into caluse only support measurement caluse")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:491
		{
			yyVAL.fields = []*Field{yyDollar[1].field}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:495
		{
			yyVAL.fields = append([]*Field{yyDollar[1].field}, yyDollar[3].fields...)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:501
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:505
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: TAG}}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:509
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: FIELD}}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			c := yyDollar[1].expr.(*CaseWhenExpr)
			c.Conditions = append(c.Conditions, yyDollar[2].expr.(*CaseWhenExpr).Conditions...)
			c.Assigners = append(c.Assigners, yyDollar[2].expr.(*CaseWhenExpr).Assigners...)
			yyVAL.expr = c
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:540
		{
			c := &CaseWhenExpr{}
			c.Conditions = []Expr{yyDollar[2].expr}
			c.Assigners = []Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.fields = []*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.fields = append([]*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}, yyDollar[3].fields...)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:559
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:563
		{
			yyVAL.expr = &BinaryExpr{Op: Token(DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:567
		{
			yyVAL.expr = &BinaryExpr{Op: Token(ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:571
		{
			yyVAL.expr = &BinaryExpr{Op: Token(SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:575
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:579
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:583
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:587
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:591
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:595
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str), Args: []Expr{}}
			for i := range yyDollar[3].fields {
				cols.Args = append(cols.Args, yyDollar[3].fields[i].Expr)
			}
			yyVAL.expr = cols
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:603
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str)}
			yyVAL.expr = cols
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:608
		{
			switch s := yyDollar[2].expr.(type) {
			case *NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: &IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr}
			}

		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:630
		{
			c := yyDollar[2].expr.(*CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			yyVAL.expr = c
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:636
		{
			yyVAL.expr = &VarRef{}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:646
		{
			yyVAL.sources = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:652
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[3].sources...)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:666
		{
			yyVAL.sources = yyDollar[1].sources

		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:671
		{
			yyVAL.sources = append(yyDollar[1].sources, yyDollar[3].sources...)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:680
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[5].sources...)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:685
		{
			yyVAL.sources = []Source{yyDollar[1].source}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:691
		{
			join := &Join{}
			if len(yyDollar[1].sources) != 1 || len(yyDollar[4].sources) != 1 {
				yylex.Error("only support one query for join")
			}
			join.LSrc = yyDollar[1].sources[0]
			join.RSrc = yyDollar[4].sources[0]
			join.Condition = yyDollar[6].expr
			yyVAL.source = join
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:704
		{
			all_subquerys := []Source{}
			for _, temp_stmt := range yyDollar[2].stmts {
				stmt, ok := temp_stmt.(*SelectStatement)
				if !ok {
					yylex.Error("expexted SelectStatement")
				}
				build_SubQuery := &SubQuery{Statement: stmt}
				all_subquerys = append(all_subquerys, build_SubQuery)
			}
			yyVAL.sources = all_subquerys
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:717
		{
			if len(yyDollar[2].stmts) != 1 {
				yylex.Error("expexted SelectStatement length")
			}
			all_subquerys := []Source{}
			stmt, ok := yyDollar[2].stmts[0].(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			build_SubQuery := &SubQuery{
				Statement: stmt,
				Alias:     yyDollar[5].str,
			}
			all_subquerys = append(all_subquerys, build_SubQuery)
			yyVAL.sources = all_subquerys
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:734
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:746
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:753
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:759
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:765
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:777
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:781
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:785
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:796
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:800
		{
			yyVAL.dimens = nil
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.dimens = []*Dimension{yyDollar[1].dimen}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:810
		{
			yyVAL.dimens = append([]*Dimension{yyDollar[1].dimen}, yyDollar[3].dimens...)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:816
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.str = yyDollar[1].str
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:830
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:834
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}}}}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:842
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: yyDollar[5].tdur}}}}
		}
	case 117:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:850
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}}}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:858
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &Dimension{Expr: &RegexLiteral{Val: re}}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:877
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:888
		{
			yyVAL.location = nil
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:894
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.inter = "null"
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:904
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:908
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:918
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:922
		{
			yyVAL.expr = nil
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:928
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:932
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:942
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:952
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:956
		{
			ident := &VarRef{Val: yyDollar[1].str}
			var expr, e Expr
			for i := range yyDollar[4].fields {
				expr = &BinaryExpr{LHS: ident, Op: Token(EQ), RHS: yyDollar[4].fields[i].Expr}
				if e == nil {
					e = expr
				} else {
					e = &BinaryExpr{LHS: e, Op: Token(OR), RHS: expr}
				}
			}
			yyVAL.expr = e
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:970
		{
			yyVAL.expr = &InCondition{Stmt: yyDollar[4].stmt.(*SelectStatement), Column: &VarRef{Val: yyDollar[1].str}}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:974
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:978
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:982
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:986
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:990
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCH,
			}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:998
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCHPHRASE,
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			if yyDollar[2].int == NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.int = EQ
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.int = NEQ
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.int = LT
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.int = LTE
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.int = GT
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.int = GTE
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.int = EQREGEX
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.int = NEQREGEX
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.int = LIKE
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.expr = &BooleanLiteral{Val: true}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.expr = &BooleanLiteral{Val: false}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &RegexLiteral{Val: re}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str + "." + yyDollar[3].str, Type: Tag}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1121
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = Float
			case "integer":
				yyVAL.dataType = Integer
			case "string":
				yyVAL.dataType = String
			case "boolean":
				yyVAL.dataType = Boolean
			case "time":
				yyVAL.dataType = Time
			case "duration":
				yyVAL.dataType = Duration
			case "unsigned":
				yyVAL.dataType = Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.dataType = Tag
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.dataType = AnyField
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.sortfs = nil
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.sortfs = append([]*SortField{yyDollar[1].sortf}, yyDollar[3].sortfs...)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.int64 = yyDollar[1].int64
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1197
		{
			if n, ok := yyDollar[1].expr.(*IntegerLiteral); ok {
				yyVAL.int64 = n.Val
			} else {
				yylex.Error("unsupported type, expect integer type")
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: true}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1253
		{
			sms := yyDollar[4].stmt

			sms.(*CreateDatabaseStatement).Name = yyDollar[3].str
			sms.(*CreateDatabaseStatement).DatabaseAttr = yyDollar[5].databasePolicy
			yyVAL.stmt = sms
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1261
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			stmt.DatabaseAttr = yyDollar[4].databasePolicy
			yyVAL.stmt = stmt
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: yyDollar[1].bool}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: yyDollar[3].bool}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[3].int64), EnableTagArray: yyDollar[1].bool}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: false}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1296
		{
			if strings.ToLower(yyDollar[3].str) != "array" {
				yylex.Error("unsupport type")
			}
			yyVAL.bool = true
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.bool = false
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			stmt.ReplicaNum = yyDollar[2].durations.ReplicaNum
			yyVAL.stmt = stmt
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[2].durations.ReplicaNum != 0 {
				yyDollar[1].durations.ReplicaNum = yyDollar[2].durations.ReplicaNum
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyDuration: &yyDollar[2].tdur}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			if yyDollar[2].int64 < 1 || yyDollar[2].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			int_integer := *(*int)(unsafe.Pointer(&yyDollar[2].int64))
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, Replication: &int_integer}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyName: yyDollar[2].str}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, ReplicaNum: uint32(yyDollar[2].int64)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: true}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: false}
		}
	case 209:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1476
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Source = yyDollar[6].ment
			sms.Condition = yyDollar[7].expr
			sms.SortFields = yyDollar[8].sortfs
			sms.Limit = yyDollar[9].intSlice[0]
			sms.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = sms
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1487
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Condition = yyDollar[4].expr
			sms.SortFields = yyDollar[5].sortfs
			sms.Limit = yyDollar[6].intSlice[0]
			sms.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = sms
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1516
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1541
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1548
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1558
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 220:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1565
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 221:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1573
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1584
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			yyVAL.stmt = stmt
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1619
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1694
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Sources = yyDollar[4].sources
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1705
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.stmt = &ShowUsersStatement{}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1723
		{
			stmt := &DropDatabaseStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1731
		{
			stmt := &DropSeriesStatement{}
			stmt.Sources = yyDollar[3].sources
			stmt.Condition = yyDollar[4].expr
			yyVAL.stmt = stmt
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			stmt := &DropSeriesStatement{}
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1746
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Sources = yyDollar[2].sources
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Condition = yyDollar[2].expr
			yyVAL.stmt = stmt
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1762
		{
			stmt := &AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt

		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1801
		{
			stmt := &DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1810
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1818
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1826
		{
			stmt := &GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[5].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1853
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1861
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1869
		{
			stmt := &RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.stmt = &DropUserStatement{Name: yyDollar[3].str}
		}
	case 251:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1902
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]
			yyVAL.stmt = stmt

		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1916
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			stmt.SLimit = yyDollar[7].intSlice[2]
			stmt.SOffset = yyDollar[7].intSlice[3]
			yyVAL.stmt = stmt
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.str = "PRIMARYKEY"
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = "SORTKEY"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = "PROPERTY"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = "SHARDKEY"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = "ENGINETYPE"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1956
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1963
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Rp = yyDollar[6].str
			stmt.Measurement = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1972
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1980
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Rp = yyDollar[5].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1988
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.str = yyDollar[2].str
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2007
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2017
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 268:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:2029
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt

		}
	case 269:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2042
		{
			stmt := yyDollar[7].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2055
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2062
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2069
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = IN
			stmt.TagKeyExpr = yyDollar[3].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &ListLiteral{Vals: temp}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2106
		{
			yyDollar[3].expr.(*ListLiteral).Vals = append(yyDollar[3].expr.(*ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[3].stmt.(*SelectStatement)
			stmt.Analyze = true
			yyVAL.stmt = stmt
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[2].stmt.(*SelectStatement)
			stmt.Analyze = false
			yyVAL.stmt = stmt
		}
	case 280:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2138
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 281:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2150
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2161
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2173
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 284:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line sql.y:2189
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt_temp := yyDollar[10].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[11].expr
			stmt.Dimensions = yyDollar[12].dimens
			stmt.Limit = yyDollar[13].intSlice[0]
			stmt.Offset = yyDollar[13].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:2206
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 286:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:2221
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 287:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:2238
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt_temp := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[9].expr
			stmt.Dimensions = yyDollar[10].dimens
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 288:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2256
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2268
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2279
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 291:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2291
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 292:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2305
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			if yyDollar[7].indexType != nil {
				stmt.IndexType = yyDollar[7].indexType.types
				stmt.IndexList = yyDollar[7].indexType.lists
			}
			stmt.ShardKey = yyDollar[9].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[10].str
			yyVAL.stmt = stmt
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2325
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			stmt.ShardKey = yyDollar[7].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2341
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			if yyDollar[7].indexType != nil {
				stmt.IndexType = yyDollar[7].indexType.types
				stmt.IndexList = yyDollar[7].indexType.lists
			}
			stmt.Type = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2359
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			yyVAL.stmt = stmt
		}
	case 296:
		yyDollar = yyS[yypt-14 : yypt+1]
		//line sql.y:2373
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			stmt.EngineType = yyDollar[8].str
			stmt.ShardKey = yyDollar[10].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[11].str
			stmt.PrimaryKey = yyDollar[12].strSlice
			stmt.SortKey = yyDollar[13].strSlice
			stmt.Property = yyDollar[14].strSlices
			yyVAL.stmt = stmt
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2396
		{
			stmt := &CreateMeasurementStatement{
				Tags:   make(map[string]int32),
				Fields: make(map[string]int32),
			}
			for i := range yyDollar[2].fieldOptions {
				fType := yyDollar[2].fieldOptions[i].tagOrField
				if fType == "tag" {
					stmt.Tags[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Tag
				} else if fType == "field" {
					filedType := strings.ToLower(yyDollar[2].fieldOptions[i].fieldType)
					if filedType == "int" {
						stmt.Fields[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Int
					} else if filedType == "uint" {
						stmt.Fields[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_UInt
					} else if filedType == "float" {
						stmt.Fields[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Float
					} else if filedType == "string" {
						stmt.Fields[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_String
					} else if filedType == "boolean" {
						stmt.Fields[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Boolean
					}
				}
			}
			stmt.IndexOption = yyDollar[3].indexOptions
			yyVAL.stmt = stmt
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.stmt = nil
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2430
		{
			info := []*IndexOption{yyDollar[1].indexOption}
			yyVAL.indexOptions = append(info, yyDollar[3].indexOptions...)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.indexOptions = nil
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.indexOption = &IndexOption{
				IndexName:  yyDollar[2].str,
				FieldName:  yyDollar[3].str,
				IndexType:  yyDollar[5].str,
				Segment:    yyDollar[6].int64,
				Tokens:     yyDollar[7].strSlice[0],
				Tokenizers: yyDollar[7].strSlice[1],
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.int64 = yyDollar[2].int64
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.int64 = -1
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			if ((yyDollar[1].str == "") && !(yyDollar[2].str == "")) || (!(yyDollar[1].str == "") && (yyDollar[2].str == "")) {
				yylex.Error("must define token and tokenizers together")
			}
			yyVAL.strSlice = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.str = yyDollar[2].str
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.str = yyDollar[2].str
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			fields := []*fieldList{yyDollar[1].fieldOption}
			yyVAL.fieldOptions = append(fields, yyDollar[2].fieldOptions...)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.fieldOptions = []*fieldList{yyDollar[1].fieldOption}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2510
		{
			col := yyDollar[1].fieldOption
			col.defaultFill = yyDollar[2].expr
			yyVAL.fieldOption = col
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.expr = nil
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "tag",
			}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2557
		{
			indextype := yyDollar[1].indexType
			if yyDollar[2].indexType != nil {
				indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			}
			yyVAL.indexType = indextype
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.indexType = nil
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2576
		{

			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.str = yyDollar[2].str
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.str = "hash"
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.strSlice = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2609
		{
			m := yyDollar[1].strSlices
			if yyDollar[3].strSlices != nil {
				m[0] = append(m[0], yyDollar[3].strSlices[0]...)
				m[1] = append(m[1], yyDollar[3].strSlices[1]...)
			}
			yyVAL.strSlices = m
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.strSlices = yyDollar[2].strSlices
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.strSlices = nil
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {yyDollar[3].str}}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {fmt.Sprintf("%d", yyDollar[3].int64)}}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.strSlices = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.str = yyDollar[1].str
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2664
		{
			stmt := &DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2672
		{
			stmt := &SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2683
		{
			stmt := &ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 340:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2691
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 341:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2703
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 342:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2714
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2726
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 344:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2740
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 345:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2752
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 346:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2763
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2775
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2789
		{
			stmt := &ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2797
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2808
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2822
		{
			stmt := &ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2829
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 353:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2838
		{
			stmt := &CreateContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
				Source:   yyDollar[9].stmt.(*SelectStatement),
			}
			if yyDollar[7].cqsp != nil {
				stmt.ResampleEvery = yyDollar[7].cqsp.ResampleEvery
				stmt.ResampleFor = yyDollar[7].cqsp.ResampleFor
			}
			yyVAL.stmt = stmt
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
			}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleFor: yyDollar[3].tdur,
			}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
				ResampleFor:   yyDollar[5].tdur,
			}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.cqsp = nil
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.stmt = &ShowContinuousQueriesStatement{}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.stmt = &DropContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
			}
		}
	case 360:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2892
		{
			stmt := yyDollar[9].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[4].str
			stmt.Ops = yyDollar[6].fields
			yyVAL.stmt = stmt
		}
	case 361:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:2899
		{
			stmt := yyDollar[11].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[6].str
			stmt.DbName = yyDollar[4].str
			stmt.Ops = yyDollar[8].fields
			yyVAL.stmt = stmt
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2907
		{
			stmt := yyDollar[7].stmt.(*CreateDownSampleStatement)
			stmt.Ops = yyDollar[4].fields
			yyVAL.stmt = stmt
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.stmt = &DropDownSampleStatement{
				RpName: yyDollar[4].str,
			}
		}
	case 364:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName: yyDollar[4].str,
				RpName: yyDollar[6].str,
			}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DropAll: true,
			}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName:  yyDollar[4].str,
				DropAll: true,
			}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.stmt = &ShowDownSampleStatement{}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.stmt = &ShowDownSampleStatement{
				DbName: yyDollar[4].str,
			}
		}
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.stmt = &CreateDownSampleStatement{
				Duration:       yyDollar[2].tdur,
				SampleInterval: yyDollar[5].tdurs,
				TimeInterval:   yyDollar[9].tdurs,
			}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.tdurs = []time.Duration{yyDollar[1].tdur}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.tdurs = append([]time.Duration{yyDollar[1].tdur}, yyDollar[3].tdurs...)
		}
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2976
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
				Delay: yyDollar[8].tdur,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into caluse only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into caluse only support measurement caluse")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2998
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into caluse only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into caluse only support measurement caluse")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.stmt = &ShowStreamsStatement{}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.stmt = &ShowStreamsStatement{Database: yyDollar[4].str}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.stmt = &DropStreamsStatement{Name: yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.stmt = &ShowQueriesStatement{}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3041
		{
			yyVAL.stmt = &KillQueryStatement{QueryID: uint64(yyDollar[3].int64)}
		}
	}
	goto yystack /* stack new state and value */
}
