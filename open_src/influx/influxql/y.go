// Code generated by goyacc sql.y. DO NOT EDIT.

//line sql.y:2
/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package influxql

import __yyfmt__ "fmt"

//line sql.y:18

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"time"

	"github.com/openGemini/openGemini/open_src/vm/protoparser/influx"
)

const DefaultQueryTimeout = time.Duration(0)

func setParseTree(yylex interface{}, stmts Statements) {
	for _, stmt := range stmts {
		yylex.(*YyParser).Query.Statements = append(yylex.(*YyParser).Query.Statements, stmt)
	}
}

func deal_Fill(fill interface{}) (FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

//line sql.y:65
type yySymType struct {
	yys              int
	stmt             Statement
	stmts            Statements
	str              string
	query            Query
	field            *Field
	fields           Fields
	sources          Sources
	source           Source
	sortfs           SortFields
	sortf            *SortField
	ment             *Measurement
	subQuery         *SubQuery
	dimens           Dimensions
	dimen            *Dimension
	int              int
	int64            int64
	float64          float64
	dataType         DataType
	expr             Expr
	tdur             time.Duration
	tdurs            []time.Duration
	bool             bool
	groupByCondition *GroupByCondition
	intSlice         []int
	inter            interface{}
	durations        *Durations
	hints            Hints
	strSlice         []string
	strSlices        [][]string
	location         *time.Location
	indexType        *IndexType
	cqsp             *cqSamplePolicyInfo
	fieldOption      *fieldList
	fieldOptions     []*fieldList
	indexOptions     []*IndexOption
	indexOption      *IndexOption
	databasePolicy   DatabasePolicy
	cmOption         *CreateMeasurementStatementOption
}

const FROM = 57346
const MEASUREMENT = 57347
const INTO = 57348
const ON = 57349
const SELECT = 57350
const WHERE = 57351
const AS = 57352
const GROUP = 57353
const BY = 57354
const ORDER = 57355
const LIMIT = 57356
const OFFSET = 57357
const SLIMIT = 57358
const SOFFSET = 57359
const SHOW = 57360
const CREATE = 57361
const FULL = 57362
const PRIVILEGES = 57363
const OUTER = 57364
const JOIN = 57365
const TO = 57366
const IN = 57367
const NOT = 57368
const EXISTS = 57369
const REVOKE = 57370
const FILL = 57371
const DELETE = 57372
const WITH = 57373
const ENGINETYPE = 57374
const COLUMNSTORE = 57375
const TSSTORE = 57376
const ALL = 57377
const ANY = 57378
const PASSWORD = 57379
const NAME = 57380
const REPLICANUM = 57381
const ALTER = 57382
const USER = 57383
const USERS = 57384
const DATABASES = 57385
const DATABASE = 57386
const MEASUREMENTS = 57387
const RETENTION = 57388
const POLICIES = 57389
const POLICY = 57390
const DURATION = 57391
const DEFAULT = 57392
const SHARD = 57393
const INDEX = 57394
const GRANT = 57395
const HOT = 57396
const WARM = 57397
const TYPE = 57398
const SET = 57399
const FOR = 57400
const GRANTS = 57401
const REPLICATION = 57402
const SERIES = 57403
const DROP = 57404
const CASE = 57405
const WHEN = 57406
const THEN = 57407
const ELSE = 57408
const BEGIN = 57409
const END = 57410
const TRUE = 57411
const FALSE = 57412
const TAG = 57413
const ATTRIBUTE = 57414
const FIELD = 57415
const KEYS = 57416
const VALUES = 57417
const KEY = 57418
const EXPLAIN = 57419
const ANALYZE = 57420
const EXACT = 57421
const CARDINALITY = 57422
const SHARDKEY = 57423
const PRIMARYKEY = 57424
const SORTKEY = 57425
const PROPERTY = 57426
const CONTINUOUS = 57427
const DIAGNOSTICS = 57428
const QUERIES = 57429
const QUERIE = 57430
const SHARDS = 57431
const STATS = 57432
const SUBSCRIPTIONS = 57433
const SUBSCRIPTION = 57434
const GROUPS = 57435
const INDEXTYPE = 57436
const INDEXLIST = 57437
const SEGMENT = 57438
const KILL = 57439
const EVERY = 57440
const RESAMPLE = 57441
const DOWNSAMPLE = 57442
const DOWNSAMPLES = 57443
const SAMPLEINTERVAL = 57444
const TIMEINTERVAL = 57445
const STREAM = 57446
const DELAY = 57447
const STREAMS = 57448
const QUERY = 57449
const PARTITION = 57450
const TOKEN = 57451
const TOKENIZERS = 57452
const MATCH = 57453
const LIKE = 57454
const MATCHPHRASE = 57455
const CONFIG = 57456
const CONFIGS = 57457
const REPLICAS = 57458
const DETAIL = 57459
const DESTINATIONS = 57460
const SCHEMA = 57461
const INDEXES = 57462
const DESC = 57463
const ASC = 57464
const COMMA = 57465
const SEMICOLON = 57466
const LPAREN = 57467
const RPAREN = 57468
const REGEX = 57469
const EQ = 57470
const NEQ = 57471
const LT = 57472
const LTE = 57473
const GT = 57474
const GTE = 57475
const DOT = 57476
const DOUBLECOLON = 57477
const NEQREGEX = 57478
const EQREGEX = 57479
const IDENT = 57480
const INTEGER = 57481
const DURATIONVAL = 57482
const STRING = 57483
const NUMBER = 57484
const HINT = 57485
const BOUNDPARAM = 57486
const AND = 57487
const OR = 57488
const ADD = 57489
const SUB = 57490
const BITWISE_OR = 57491
const BITWISE_XOR = 57492
const MUL = 57493
const DIV = 57494
const MOD = 57495
const BITWISE_AND = 57496
const UMINUS = 57497

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"INTO",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"TO",
	"IN",
	"NOT",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ENGINETYPE",
	"COLUMNSTORE",
	"TSSTORE",
	"ALL",
	"ANY",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"BEGIN",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"ATTRIBUTE",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"PRIMARYKEY",
	"SORTKEY",
	"PROPERTY",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"SEGMENT",
	"KILL",
	"EVERY",
	"RESAMPLE",
	"DOWNSAMPLE",
	"DOWNSAMPLES",
	"SAMPLEINTERVAL",
	"TIMEINTERVAL",
	"STREAM",
	"DELAY",
	"STREAMS",
	"QUERY",
	"PARTITION",
	"TOKEN",
	"TOKENIZERS",
	"MATCH",
	"LIKE",
	"MATCHPHRASE",
	"CONFIG",
	"CONFIGS",
	"REPLICAS",
	"DETAIL",
	"DESTINATIONS",
	"SCHEMA",
	"INDEXES",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"BOUNDPARAM",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3236

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 453,
	112, 151,
	128, 151,
	129, 151,
	130, 151,
	131, 151,
	132, 151,
	133, 151,
	136, 151,
	137, 151,
	-2, 140,
}

const yyPrivate = 57344

const yyLast = 1148

var yyAct = [...]int16{
	751, 486, 858, 878, 827, 658, 407, 848, 807, 474,
	750, 378, 672, 705, 613, 685, 662, 135, 679, 735,
	602, 229, 598, 524, 69, 733, 4, 525, 585, 405,
	199, 426, 239, 223, 311, 308, 225, 2, 150, 169,
	271, 337, 338, 376, 85, 860, 579, 861, 485, 134,
	79, 156, 157, 161, 162, 862, 83, 84, 536, 859,
	876, 158, 159, 163, 160, 156, 157, 161, 162, 158,
	159, 163, 160, 156, 157, 161, 162, 87, 73, 677,
	155, 599, 206, 453, 477, 207, 600, 856, 688, 761,
	762, 207, 145, 763, 261, 152, 57, 262, 337, 338,
	832, 689, 337, 338, 87, 812, 87, 583, 584, 800,
	799, 431, 74, 273, 87, 430, 227, 547, 200, 826,
	200, 205, 208, 337, 338, 75, 81, 78, 82, 80,
	748, 86, 219, 747, 221, 76, 206, 889, 72, 207,
	730, 211, 543, 643, 57, 228, 616, 87, 642, 641,
	640, 520, 222, 164, 198, 168, 815, 694, 197, 172,
	693, 200, 201, 158, 159, 163, 160, 156, 157, 161,
	162, 251, 532, 210, 534, 87, 206, 581, 258, 207,
	582, 201, 198, 523, 201, 256, 197, 767, 521, 200,
	272, 257, 284, 306, 282, 288, 201, 507, 418, 79,
	255, 506, 828, 396, 254, 83, 84, 395, 765, 206,
	280, 281, 207, 214, 808, 142, 240, 158, 159, 163,
	160, 156, 157, 161, 162, 140, 673, 287, 324, 321,
	707, 673, 737, 170, 196, 263, 264, 265, 266, 267,
	268, 269, 270, 526, 322, 276, 604, 277, 298, 614,
	615, 240, 297, 340, 370, 758, 242, 618, 617, 481,
	482, 74, 533, 87, 739, 336, 335, 484, 483, 154,
	720, 682, 356, 371, 75, 81, 78, 82, 80, 681,
	86, 668, 341, 342, 76, 629, 628, 72, 348, 349,
	350, 351, 352, 353, 592, 591, 355, 354, 885, 578,
	382, 576, 575, 573, 571, 381, 558, 372, 385, 387,
	339, 398, 275, 557, 556, 551, 549, 429, 143, 535,
	522, 509, 403, 478, 439, 470, 469, 466, 141, 465,
	443, 444, 446, 380, 369, 368, 367, 364, 363, 362,
	384, 386, 388, 404, 359, 357, 458, 459, 432, 397,
	328, 327, 326, 325, 402, 320, 319, 318, 374, 451,
	452, 313, 201, 305, 302, 445, 285, 447, 278, 253,
	456, 215, 213, 209, 195, 193, 201, 165, 201, 435,
	460, 555, 165, 174, 491, 627, 167, 166, 436, 559,
	476, 167, 166, 490, 545, 495, 508, 554, 442, 497,
	511, 493, 494, 433, 496, 394, 317, 651, 473, 510,
	472, 505, 841, 518, 87, 840, 240, 240, 514, 516,
	517, 541, 891, 68, 542, 449, 240, 883, 429, 875,
	544, 874, 872, 492, 855, 819, 519, 809, 802, 757,
	756, 501, 754, 504, 753, 674, 670, 669, 656, 566,
	513, 515, 450, 531, 437, 479, 373, 203, 886, 540,
	550, 839, 546, 836, 548, 553, 797, 766, 709, 684,
	657, 565, 457, 454, 580, 177, 201, 346, 201, 563,
	345, 564, 561, 570, 567, 343, 588, 572, 316, 680,
	334, 332, 605, 201, 68, 884, 873, 609, 590, 850,
	639, 805, 776, 607, 608, 764, 755, 696, 610, 569,
	606, 601, 630, 697, 698, 626, 568, 560, 153, 749,
	638, 624, 625, 173, 634, 419, 636, 637, 593, 594,
	632, 633, 216, 635, 312, 146, 202, 309, 731, 148,
	339, 660, 881, 803, 744, 655, 611, 795, 650, 648,
	619, 189, 220, 623, 190, 661, 639, 870, 853, 831,
	665, 734, 631, 290, 291, 292, 463, 399, 299, 675,
	676, 392, 304, 390, 175, 204, 653, 312, 175, 310,
	300, 301, 303, 57, 743, 289, 295, 296, 687, 184,
	201, 185, 671, 333, 666, 187, 188, 683, 180, 181,
	182, 678, 692, 778, 331, 201, 714, 713, 622, 700,
	701, 732, 147, 612, 499, 652, 699, 691, 259, 79,
	260, 420, 310, 813, 811, 83, 84, 703, 719, 708,
	312, 704, 690, 3, 717, 718, 724, 715, 726, 727,
	833, 716, 722, 723, 589, 725, 293, 294, 742, 721,
	178, 179, 375, 144, 279, 172, 789, 414, 417, 702,
	415, 416, 710, 711, 729, 834, 252, 728, 186, 680,
	659, 645, 530, 383, 529, 738, 528, 527, 391, 241,
	393, 74, 746, 87, 212, 400, 194, 401, 176, 752,
	663, 664, 539, 139, 75, 81, 78, 82, 80, 70,
	86, 773, 149, 768, 76, 422, 835, 72, 137, 117,
	741, 740, 136, 136, 745, 136, 775, 772, 771, 783,
	784, 774, 712, 777, 786, 787, 782, 788, 779, 780,
	283, 785, 759, 781, 138, 455, 646, 621, 552, 620,
	502, 769, 389, 498, 425, 116, 240, 358, 114, 314,
	115, 801, 792, 586, 344, 360, 794, 796, 793, 574,
	467, 243, 464, 448, 127, 687, 804, 791, 806, 798,
	790, 379, 361, 770, 500, 244, 503, 817, 245, 695,
	810, 587, 249, 512, 824, 247, 816, 825, 489, 118,
	818, 823, 475, 820, 132, 137, 121, 821, 822, 248,
	125, 596, 597, 122, 119, 124, 234, 233, 120, 690,
	126, 487, 488, 136, 136, 837, 838, 814, 843, 137,
	123, 562, 379, 842, 57, 847, 366, 667, 175, 365,
	462, 845, 846, 849, 441, 440, 854, 438, 844, 434,
	421, 857, 330, 79, 128, 329, 323, 864, 865, 83,
	84, 133, 286, 250, 863, 867, 849, 866, 871, 129,
	130, 79, 246, 131, 218, 877, 217, 83, 84, 192,
	191, 880, 151, 377, 577, 471, 882, 468, 136, 183,
	538, 537, 424, 423, 428, 880, 888, 427, 887, 890,
	654, 235, 649, 236, 647, 736, 868, 869, 879, 851,
	829, 852, 830, 94, 706, 231, 406, 87, 760, 595,
	686, 603, 274, 347, 97, 171, 77, 238, 232, 81,
	78, 82, 80, 74, 86, 87, 237, 230, 76, 480,
	224, 226, 1, 71, 54, 53, 75, 81, 78, 82,
	80, 110, 86, 52, 56, 55, 76, 51, 50, 72,
	49, 92, 88, 315, 89, 90, 79, 48, 47, 46,
	99, 45, 83, 84, 44, 43, 42, 41, 96, 40,
	91, 39, 38, 37, 36, 35, 34, 33, 79, 32,
	93, 31, 95, 30, 83, 84, 29, 28, 27, 26,
	109, 106, 107, 108, 100, 25, 103, 24, 98, 23,
	104, 20, 19, 21, 18, 22, 17, 16, 15, 13,
	101, 14, 12, 11, 644, 102, 57, 7, 74, 10,
	87, 9, 8, 307, 105, 6, 58, 59, 111, 112,
	5, 75, 81, 78, 82, 80, 64, 86, 61, 0,
	461, 76, 87, 0, 0, 0, 0, 113, 62, 0,
	0, 0, 0, 75, 81, 78, 82, 80, 57, 86,
	0, 63, 0, 76, 0, 66, 0, 0, 58, 59,
	60, 0, 0, 0, 0, 410, 411, 0, 64, 0,
	61, 0, 0, 0, 0, 65, 408, 412, 414, 417,
	62, 415, 416, 0, 0, 0, 0, 409, 0, 0,
	0, 0, 0, 63, 0, 67, 0, 66, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67,
}

var yyPact = [...]int16{
	1050, -1000, 370, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 556, 909, 704,
	759, 810, 688, 190, 180, 575, 498, 432, 1050, 866,
	798, 395, 134, 70, 893, 252, 893, -1000, -1000, 95,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406, 821,
	641, 571, -1000, 524, 875, 515, 610, 516, -1000, 458,
	467, 863, 862, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 237, 638, 236, 48, 429, 450,
	-56, -56, 235, 810, 636, 234, 74, 233, 425, 859,
	857, -56, 461, -56, 786, -1000, 20, 780, 631, 48,
	754, 855, 778, 846, 816, -1000, 608, 231, 65, -1000,
	874, 20, 866, 798, 547, -44, 893, 893, 893, 893,
	893, 893, 893, 893, -86, -13, 174, 230, -1000, 588,
	591, 591, 780, -1000, 699, 228, 845, 810, 505, 821,
	821, 567, 507, 114, 821, 501, 226, 502, 821, -1000,
	-1000, 225, -56, 506, 223, 718, 363, 272, 219, -1000,
	-1000, -1000, 218, 217, 798, 866, -1000, -1000, 839, -1000,
	786, -1000, 215, -1000, -1000, -1000, 214, 213, 212, -1000,
	838, 835, -1000, -1000, 481, 470, -1000, -1000, 1008, -104,
	-1000, 780, 257, 360, 727, 355, 352, -1000, -1000, 160,
	-78, 207, 716, 206, 748, 201, 200, 199, 822, 198,
	197, -1000, 196, -56, -1000, 786, -1000, 874, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -100, -100, -100, -1000, -1000,
	-100, -1000, 330, -1000, -1000, -1000, -1000, -1000, -1000, 893,
	586, -1000, -22, 868, 758, -1000, 195, 786, 758, 821,
	810, 810, 711, 493, 821, 491, 821, 271, 69, 809,
	487, 821, -1000, 821, 810, -1000, -1000, 463, -1000, 1037,
	59, 409, 549, 833, 668, 713, -56, -23, 269, 832,
	254, 328, 830, -56, -1000, 828, 827, 264, -1000, -56,
	-56, 20, 194, 20, 740, 299, 326, 780, 780, -86,
	-43, 348, 710, 816, 347, -56, -56, 915, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 823, 485, 738,
	191, 189, -1000, 736, 873, 188, 187, -1000, 871, 282,
	280, 781, 786, -1000, 16, 185, 893, 131, 797, 776,
	-1000, 758, 797, 810, 786, 781, 786, 758, 712, 538,
	821, 709, 821, 810, 63, 262, 183, 758, 797, 821,
	810, 810, 786, 781, -1000, -1000, 1037, -1000, 11, 49,
	182, 44, -1000, 105, 628, 627, 625, 623, 559, 33,
	124, 181, -83, -1000, -1000, 660, -1000, -56, 298, 71,
	260, -21, -1000, -21, 178, 798, 177, 707, 816, 263,
	176, 175, 168, -1000, 255, -1000, 394, -1000, 20, 811,
	-1000, -1000, -1000, -1000, 136, 346, 323, 816, 393, 386,
	-1000, 780, 166, 105, 165, 735, -1000, 164, 163, 870,
	-1000, 161, -95, 38, 724, 769, 781, -1000, 576, -78,
	786, 157, 156, 287, 287, -1000, 785, -58, -58, 108,
	797, -1000, 786, 781, 781, 797, 758, 797, 537, 121,
	708, 706, 532, 810, 786, 781, 251, 148, 147, -1000,
	797, -1000, 810, 786, 781, 786, 781, 781, 797, -1000,
	-1000, -1000, -1000, -1000, 377, -1000, -1000, 10, 9, 8,
	3, -1000, -1000, -1000, -1000, 622, 705, 455, 454, 279,
	-1000, -1000, -1000, -1000, 542, -21, -1000, -1000, -1000, 446,
	322, 345, 621, 436, -56, 655, -1000, -1000, -1000, -56,
	20, 820, 143, 321, 320, 88, -1000, 319, -56, -56,
	-47, 1037, 433, -1000, 141, -1000, -1000, 133, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 758, 344, -50, 724, -1000,
	758, -1000, -1000, -1000, -1000, -1000, 21, 18, 764, -1000,
	-1000, -1000, -1000, 384, 392, -1000, 781, 797, 797, -1000,
	797, -1000, 121, 786, 92, 92, 343, 287, 287, 691,
	531, 530, 121, 786, 781, 781, 797, 132, -1000, -1000,
	-1000, 786, 781, 781, 797, 781, 797, 797, -1000, 105,
	-1000, -1000, -1000, -1000, 614, 0, 503, 480, 94, 480,
	126, 677, -1000, -1000, 581, 486, 683, 798, -1000, -7,
	-10, 401, -56, -1000, -1000, -1000, -1000, 780, -1000, -1000,
	-1000, 318, 316, 383, -1000, 314, 313, -1000, -1000, -1000,
	117, -1000, -1000, 797, -49, -1000, 382, 73, 342, 52,
	-1000, 758, 797, 756, -1000, -58, 108, -1000, -1000, 797,
	-1000, -1000, -1000, 786, 758, -1000, 379, -1000, -1000, 92,
	-1000, -1000, 527, 121, 121, 786, 781, 797, 797, -1000,
	-1000, 781, 797, 797, -1000, 797, -1000, -1000, -1000, -1000,
	596, 749, 746, 613, 105, -1000, 94, 452, 613, 341,
	-1000, -1000, 816, -30, -31, 621, 312, 441, -1000, 655,
	-1000, 378, -104, -1000, -1000, 93, -1000, -1000, -1000, 76,
	311, -1000, -1000, -1000, -50, 553, -35, 552, 797, -1000,
	17, -1000, -1000, -1000, 758, 797, 92, 309, 121, 786,
	786, 781, 797, -1000, -1000, 797, -1000, -1000, -1000, -20,
	-1000, -1000, -1000, 377, -1000, 64, 477, -40, 572, 607,
	-1000, -1000, 675, 338, -56, -56, -1000, -1000, 336, -1000,
	-1000, -1000, 289, -1000, 76, -1000, 797, -1000, -1000, -1000,
	786, 781, 781, 797, -1000, -1000, 606, -1000, 376, 475,
	-1000, 64, 308, -1000, -53, 621, -81, -1000, -1000, -96,
	-1000, -93, -1000, -1000, 781, 797, 797, -1000, -1000, 606,
	64, 473, -1000, 64, -1000, -1000, -1000, -1000, 306, 373,
	305, 303, -80, 797, -1000, -1000, -1000, -1000, -1000, -1000,
	-56, -1000, 439, -81, -1000, -1000, 301, -1000, -1000, 372,
	170, 333, -1000, -1000, -56, -2, -81, -1000, -1000, -1000,
	296, -1000,
}

var yyPgo = [...]int16{
	0, 633, 1030, 1025, 1023, 1022, 26, 1021, 1019, 1017,
	1014, 1013, 1012, 1011, 1009, 1008, 1007, 1006, 1005, 1004,
	1003, 1002, 1001, 999, 997, 995, 14, 989, 988, 987,
	986, 983, 981, 979, 977, 976, 975, 974, 973, 972,
	971, 969, 967, 966, 965, 5, 964, 961, 959, 958,
	957, 953, 950, 948, 947, 945, 944, 943, 935, 934,
	24, 12, 933, 932, 37, 49, 33, 36, 38, 931,
	30, 930, 116, 929, 17, 927, 926, 21, 917, 916,
	78, 32, 13, 915, 39, 913, 912, 20, 11, 911,
	9, 15, 910, 48, 1, 909, 28, 908, 7, 6,
	906, 29, 44, 904, 383, 18, 27, 0, 903, 16,
	23, 25, 4, 902, 901, 10, 900, 899, 3, 898,
	897, 896, 8, 895, 19, 894, 892, 890, 2, 22,
	34, 887, 884, 31, 35, 883, 882, 881, 880,
}

var yyR1 = [...]uint8{
	0, 63, 64, 64, 64, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	60, 60, 62, 62, 62, 62, 62, 62, 84, 84,
	83, 61, 61, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 68,
	68, 65, 66, 66, 66, 66, 66, 66, 66, 69,
	67, 67, 67, 71, 72, 72, 72, 72, 72, 70,
	70, 70, 90, 90, 91, 91, 107, 107, 92, 92,
	92, 92, 92, 92, 92, 92, 122, 122, 96, 96,
	97, 97, 97, 74, 74, 76, 76, 75, 75, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 78,
	81, 81, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 102, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 86, 86, 86, 88, 88, 87, 87, 89,
	89, 89, 93, 129, 129, 94, 94, 94, 94, 95,
	95, 95, 95, 2, 2, 3, 3, 134, 134, 134,
	134, 134, 130, 130, 4, 101, 101, 100, 100, 100,
	100, 100, 100, 100, 7, 7, 73, 73, 73, 73,
	8, 8, 9, 9, 5, 5, 5, 10, 10, 98,
	98, 99, 99, 99, 99, 11, 11, 12, 14, 13,
	13, 15, 15, 16, 17, 19, 19, 19, 21, 21,
	20, 20, 20, 22, 22, 18, 23, 23, 108, 108,
	108, 108, 108, 108, 108, 108, 52, 52, 52, 52,
	52, 104, 104, 24, 24, 25, 25, 26, 26, 26,
	26, 26, 82, 82, 103, 27, 27, 28, 28, 28,
	28, 29, 29, 29, 29, 30, 30, 30, 30, 31,
	31, 135, 135, 136, 125, 125, 126, 126, 111, 111,
	137, 137, 138, 116, 116, 117, 117, 121, 121, 51,
	51, 133, 133, 131, 131, 132, 132, 132, 123, 124,
	124, 112, 112, 105, 105, 113, 114, 118, 118, 120,
	119, 119, 119, 110, 110, 106, 32, 33, 34, 35,
	35, 35, 35, 36, 36, 36, 36, 37, 38, 38,
	39, 40, 41, 127, 127, 127, 127, 42, 43, 44,
	44, 44, 46, 46, 46, 46, 47, 47, 45, 128,
	128, 48, 48, 49, 49, 50, 53, 54, 115, 115,
	109, 109, 57, 57, 58, 59, 59, 59, 59, 55,
	56, 56, 56, 56, 56,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 10, 11,
	1, 3, 1, 3, 3, 1, 3, 3, 1, 2,
	4, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 3, 2, 1, 1, 5, 6, 2,
	0, 2, 1, 3, 1, 3, 3, 5, 1, 6,
	3, 5, 3, 1, 5, 4, 4, 3, 1, 1,
	1, 1, 3, 0, 1, 3, 1, 1, 1, 3,
	4, 6, 7, 1, 3, 1, 4, 0, 4, 0,
	1, 1, 1, 2, 0, 1, 3, 1, 3, 1,
	3, 5, 5, 4, 6, 6, 5, 6, 6, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 3, 0, 1, 3, 1,
	2, 2, 2, 1, 1, 4, 2, 2, 0, 4,
	2, 2, 0, 2, 3, 5, 4, 2, 1, 3,
	3, 0, 3, 3, 2, 1, 2, 1, 2, 2,
	2, 2, 1, 2, 9, 6, 2, 2, 2, 2,
	5, 3, 7, 8, 6, 9, 9, 5, 4, 1,
	2, 3, 3, 3, 3, 7, 6, 2, 3, 4,
	3, 3, 2, 7, 6, 6, 7, 6, 5, 4,
	6, 7, 6, 5, 4, 3, 8, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 8, 7, 7,
	6, 2, 0, 7, 6, 11, 10, 2, 2, 4,
	2, 2, 1, 3, 1, 3, 2, 10, 9, 9,
	8, 13, 12, 12, 11, 10, 9, 9, 8, 5,
	5, 0, 5, 8, 0, 2, 0, 5, 0, 2,
	0, 3, 3, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 1, 2, 2, 2, 3, 2, 3, 2,
	0, 1, 3, 2, 0, 2, 2, 3, 1, 2,
	3, 3, 0, 1, 3, 1, 3, 6, 4, 9,
	8, 8, 7, 9, 8, 8, 7, 2, 7, 3,
	3, 3, 10, 3, 3, 5, 0, 3, 6, 9,
	11, 7, 4, 6, 2, 4, 2, 4, 10, 1,
	3, 8, 6, 2, 4, 3, 2, 3, 1, 3,
	1, 1, 10, 8, 2, 3, 5, 7, 5, 2,
	6, 6, 6, 6, 6,
}

var yyChk = [...]int16{
	-1000, -63, -64, -1, -6, -2, -3, -9, -5, -7,
	-8, -11, -12, -14, -13, -15, -16, -17, -19, -21,
	-22, -20, -18, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, -40,
	-41, -42, -43, -44, -46, -47, -48, -49, -50, -52,
	-53, -54, -57, -58, -59, -55, -56, 8, 18, 19,
	62, 30, 40, 53, 28, 77, 57, 97, 124, -60,
	143, -62, 151, -80, 125, 138, 148, -79, 140, 63,
	142, 139, 141, 69, 70, -102, 144, 127, 43, 45,
	46, 61, 42, 71, -108, 73, 59, 5, 89, 51,
	85, 101, 106, 87, 91, 115, 82, 83, 84, 81,
	32, 119, 120, 138, 44, 46, 41, 5, 85, 100,
	104, 92, 44, 61, 46, 41, 51, 5, 85, 100,
	101, 104, 35, 92, -65, -74, 4, 9, 46, 5,
	35, 138, 35, 138, 78, -6, 37, 114, 107, -1,
	-68, 6, -60, 123, 135, 10, 151, 152, 147, 148,
	150, 153, 154, 149, -80, 125, 135, 134, -80, -84,
	138, -83, 64, 117, -104, 7, 47, -104, 79, 80,
	74, 75, 76, 4, 74, 76, 58, 79, 80, 93,
	87, 7, 7, 138, 48, 138, -72, 138, 134, -70,
	141, -102, 107, 7, 125, -107, 138, 141, -107, 138,
	-65, -74, 48, 138, 139, 138, 107, 7, 7, -107,
	91, -107, -74, -66, -71, -67, -69, -72, 125, -77,
	-75, 125, 138, 27, 26, 111, 113, -76, -78, -81,
	-80, 48, -72, 7, 21, 24, 7, 7, 21, 4,
	7, -6, 58, 138, 139, -65, -66, -68, -60, 71,
	73, 138, 141, -80, -80, -80, -80, -80, -80, -80,
	-80, 126, -60, 126, -86, 138, 71, 73, 138, 66,
	-84, -84, -77, 31, -74, 138, 7, -65, -74, 80,
	-104, -104, -104, 79, 80, 79, 80, 138, 134, -104,
	79, 80, 138, 80, -104, 138, -107, -4, -134, 31,
	116, -130, 71, 138, 31, -51, 125, 134, 138, 138,
	138, -60, -68, 7, -74, 138, 138, 138, 138, 7,
	7, 123, 10, 123, 20, -64, -67, 145, 146, -80,
	-77, 25, 26, 125, 27, 125, 125, -85, 128, 129,
	130, 131, 132, 133, 137, 136, 112, 138, 31, 138,
	7, 24, 138, 138, 138, 7, 4, 138, 138, 138,
	-107, -74, -65, 126, -80, 66, 65, 5, -88, 13,
	138, -74, -88, -104, -65, -74, -65, -74, -65, 31,
	80, -104, 80, -104, 134, 138, 134, -65, -88, 80,
	-104, -104, -65, -74, -134, -101, -100, -99, 49, 60,
	38, 39, 50, 81, 51, 54, 55, 52, 139, 116,
	72, 7, 37, -135, -136, 31, -133, -131, -132, -107,
	138, 134, -70, 134, 7, 125, 134, 126, 7, -107,
	7, 7, 134, -107, -107, -66, 138, -66, 23, 126,
	126, -77, -77, 126, 125, 25, -6, 125, -107, -107,
	-81, 125, 7, 81, 24, 138, 138, 24, 4, 138,
	138, 4, 128, 128, -90, 11, -74, 68, 138, -80,
	-73, 128, 129, 137, 136, -93, -94, 14, 15, 12,
	-88, -94, -65, -74, -74, -90, -74, -88, 31, 76,
	-104, -65, 31, -104, -65, -74, 138, 134, 134, 138,
	-88, -94, -104, -65, -74, -65, -74, -74, -90, -101,
	140, 139, 138, 139, -110, -106, 138, 49, 49, 49,
	49, -130, 139, 138, 50, 138, 141, -137, -138, 32,
	-133, 123, 126, 71, -107, 134, -70, 138, -70, 138,
	-60, 138, 31, -6, 134, 118, 138, 138, 138, 134,
	123, -66, 10, -60, -6, 125, 126, -6, 123, 123,
	-77, 138, -110, 138, 24, 138, 138, 4, 138, 141,
	-107, 139, 142, 69, 70, -96, 29, 12, -90, 68,
	-74, 138, 138, -102, -102, -95, 16, 17, -129, 139,
	144, -129, -87, -89, 138, -94, -74, -90, -90, -94,
	-88, -93, 76, -26, 128, 129, 25, 137, 136, -65,
	31, 31, 76, -65, -74, -74, -90, 134, 138, 138,
	-94, -65, -74, -74, -90, -74, -90, -90, -94, 123,
	140, 140, 140, 140, -10, 49, 31, -125, 94, -126,
	94, 128, 73, -70, -127, 99, 126, 125, -45, 49,
	105, -107, -109, 35, 36, -107, -66, 7, 138, 126,
	126, -6, -61, 138, 126, -107, -107, 126, -101, -105,
	56, 138, 138, -88, 125, -91, -92, -107, 138, 151,
	-102, -96, -88, 139, 139, 15, 123, 121, 122, -90,
	-94, -94, -93, -26, -74, -82, -103, 138, -82, 125,
	-102, -102, 31, 76, 76, -26, -74, -90, -90, -94,
	138, -74, -90, -90, -94, -90, -94, -94, -106, 50,
	140, 35, 108, -111, 81, -124, -123, 138, -111, 138,
	34, 33, 67, 98, 58, 31, -60, 140, 140, 118,
	-115, -107, -77, 126, 126, 123, 126, 126, 138, -93,
	-97, 138, 139, 142, 123, 135, 125, 135, -88, -93,
	17, -129, -87, -94, -74, -88, 123, -82, 76, -26,
	-26, -74, -90, -94, -94, -90, -94, -94, -94, 60,
	21, 21, -105, -110, -124, 95, -105, 125, -6, 140,
	140, -45, 126, 102, -109, 123, -61, -122, 138, 126,
	-91, 71, 140, 71, -93, 139, -88, -94, -82, 126,
	-26, -74, -74, -90, -94, -94, 139, -112, 138, -116,
	-113, 82, 140, 68, 58, 31, 125, -115, -115, 125,
	126, 123, -122, -94, -74, -90, -90, -94, -98, -99,
	123, -117, -114, 83, -112, 126, 140, -45, -128, 140,
	141, 140, 148, -90, -94, -94, -98, -112, -121, -120,
	84, -112, 126, 123, 126, 126, 140, -94, -118, -119,
	-107, 103, -128, 126, 123, 128, 125, -118, -107, 139,
	-128, 126,
}

var yyDef = [...]int16{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 3, 90,
	0, 60, 62, 65, 0, 162, 0, 85, 86, 0,
	164, 165, 166, 167, 168, 169, 171, 161, 193, 272,
	0, 272, 237, 0, 0, 0, 0, 0, 357, 0,
	0, 376, 383, 386, 394, 399, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	374, 0, 0, 0, 134, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 4,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 68, 0, 194, 134, 0, 221, 134, 0, 272,
	272, 272, 0, 0, 272, 0, 0, 0, 272, 360,
	367, 0, 0, 201, 0, 0, 320, 109, 0, 108,
	110, 111, 0, 0, 0, 90, 116, 117, 0, 238,
	134, 240, 0, 255, 346, 361, 0, 0, 0, 385,
	395, 0, 241, 91, 92, 94, 98, 103, 0, 133,
	139, 0, 162, 0, 0, 0, 0, 137, 135, 0,
	150, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 387, 134, 89, 0, 61, 63,
	64, 66, 67, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 0, 83, 163, 172, 173, 174, 170, 0,
	0, 69, 0, 0, 176, 271, 0, 134, 176, 272,
	134, 134, 0, 0, 272, 0, 272, 266, 0, 176,
	0, 272, 348, 272, 134, 377, 384, 201, 196, 0,
	0, 198, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 0, 0, 372, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 0, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 254, 0, 0,
	0, 113, 134, 82, 0, 0, 0, 0, 188, 0,
	220, 176, 188, 134, 134, 113, 134, 176, 0, 0,
	272, 0, 272, 134, 0, 0, 0, 176, 188, 272,
	134, 134, 134, 113, 195, 204, 205, 207, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 299, 300, 310, 319, 322, 0, 0,
	109, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 398, 93, 96, 95, 0, 100,
	102, 136, 138, -2, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	253, 0, 0, 0, 129, 0, 113, 87, 0, 70,
	134, 0, 0, 0, 0, 215, 192, 0, 0, 0,
	188, 236, 134, 113, 113, 188, 176, 188, 0, 0,
	0, 0, 0, 134, 134, 113, 0, 0, 0, 270,
	188, 274, 134, 134, 113, 134, 113, 113, 188, 206,
	208, 209, 210, 211, 213, 343, 345, 0, 0, 0,
	0, 199, 200, 202, 203, 0, 224, 304, 306, 0,
	321, 323, 324, 325, 327, 0, 106, 109, 105, 366,
	0, 0, 0, 382, 0, 0, 244, 368, 373, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 334, 245, 0, 247, 250, 0, 252, 347,
	400, 401, 402, 403, 404, 176, 0, 0, 129, 88,
	176, 216, 217, 218, 219, 182, 0, 0, 186, 183,
	184, 187, 175, 177, 179, 235, 113, 188, 188, 356,
	188, 257, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 113, 113, 188, 0, 268, 269,
	273, 134, 113, 113, 188, 113, 188, 188, 352, 0,
	231, 232, 233, 234, 222, 0, 0, 308, 330, 308,
	0, 0, 326, 104, 0, 0, 0, 0, 371, 0,
	0, 0, 0, 390, 391, 397, 97, 0, 101, 141,
	142, 0, 0, 71, 146, 0, 0, 151, 243, 358,
	0, 246, 251, 188, 0, 112, 114, 118, 116, 123,
	125, 176, 188, 190, 191, 0, 0, 180, 181, 188,
	354, 355, 256, 134, 176, 277, 282, 284, 278, 0,
	280, 281, 0, 0, 0, 134, 113, 188, 188, 290,
	267, 113, 188, 188, 298, 188, 350, 351, 344, 223,
	0, 0, 0, 334, 0, 305, 330, 0, 334, 0,
	311, 312, 0, 0, 0, 0, 0, 0, 381, 0,
	393, 388, 99, 144, 145, 0, 147, 148, 333, 127,
	0, 130, 131, 132, 0, 0, 0, 0, 188, 214,
	0, 185, 178, 353, 176, 188, 0, 0, 0, 134,
	134, 113, 188, 288, 289, 188, 296, 297, 349, 0,
	225, 226, 302, 309, 329, 0, 313, 0, 0, 363,
	364, 369, 0, 0, 0, 0, 72, 58, 0, 128,
	115, 119, 0, 124, 127, 189, 188, 276, 283, 279,
	134, 113, 113, 188, 287, 295, 228, 328, 331, 315,
	314, 0, 0, 362, 0, 0, 0, 392, 389, 0,
	120, 0, 59, 275, 113, 188, 188, 294, 227, 229,
	0, 317, 316, 0, 335, 307, 365, 370, 0, 379,
	0, 0, 0, 188, 292, 293, 230, 332, 303, 318,
	342, 336, 0, 0, 126, 121, 0, 291, 339, 338,
	0, 0, 380, 122, 342, 0, 0, 337, 340, 341,
	0, 378,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:188
		{
			setParseTree(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:194
		{
			yyVAL.stmts = []Statement{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:198
		{

			if len(yyDollar[1].stmts) == 1 {
				yyVAL.stmts = yyDollar[1].stmts
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:207
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:215
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:219
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:223
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:227
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:231
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:235
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:239
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:243
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:247
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:251
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:255
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:259
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:263
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:267
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:271
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:275
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:279
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:283
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:287
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:291
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:295
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:299
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:303
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:307
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:311
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:315
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:339
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:343
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:351
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:355
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:359
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:419
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 58:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:429
		{
			stmt := &SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Sources = yyDollar[4].sources
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[8].sortfs
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			stmt.SLimit = yyDollar[9].intSlice[2]
			stmt.SOffset = yyDollar[9].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[7].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[10].location
			if len(yyDollar[3].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[3].sources) == 1 {
				mst, ok := yyDollar[3].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 59:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:469
		{
			stmt := &SelectStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Fields = yyDollar[3].fields
			stmt.Sources = yyDollar[5].sources
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			stmt.SLimit = yyDollar[10].intSlice[2]
			stmt.SOffset = yyDollar[10].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[8].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			WalkFunc(stmt.Fields, func(n Node) {
				if _, ok := n.(*Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[11].location
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one measurement")
			} else if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.fields = []*Field{yyDollar[1].field}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.fields = append([]*Field{yyDollar[1].field}, yyDollar[3].fields...)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:524
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: TAG}}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.field = &Field{Expr: &Wildcard{Type: FIELD}}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.field = &Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			c := yyDollar[1].expr.(*CaseWhenExpr)
			c.Conditions = append(c.Conditions, yyDollar[2].expr.(*CaseWhenExpr).Conditions...)
			c.Assigners = append(c.Assigners, yyDollar[2].expr.(*CaseWhenExpr).Assigners...)
			yyVAL.expr = c
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:563
		{
			c := &CaseWhenExpr{}
			c.Conditions = []Expr{yyDollar[2].expr}
			c.Assigners = []Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
			yyVAL.fields = []*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.fields = append([]*Field{&Field{Expr: &VarRef{Val: yyDollar[1].str}}}, yyDollar[3].fields...)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:586
		{
			yyVAL.expr = &BinaryExpr{Op: Token(DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:590
		{
			yyVAL.expr = &BinaryExpr{Op: Token(ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:594
		{
			yyVAL.expr = &BinaryExpr{Op: Token(SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:598
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:602
		{
			yyVAL.expr = &BinaryExpr{Op: Token(MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:606
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:610
		{
			yyVAL.expr = &BinaryExpr{Op: Token(BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:618
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str), Args: []Expr{}}
			for i := range yyDollar[3].fields {
				cols.Args = append(cols.Args, yyDollar[3].fields[i].Expr)
			}
			yyVAL.expr = cols
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:626
		{
			cols := &Call{Name: strings.ToLower(yyDollar[1].str)}
			yyVAL.expr = cols
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:631
		{
			switch s := yyDollar[2].expr.(type) {
			case *NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &BinaryExpr{Op: Token(MUL), LHS: &IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr}
			}

		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.expr = &DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:653
		{
			c := yyDollar[2].expr.(*CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			yyVAL.expr = c
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:659
		{
			yyVAL.expr = &VarRef{}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:669
		{
			yyVAL.sources = nil
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[3].sources...)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.sources = yyDollar[1].sources

		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:694
		{
			yyVAL.sources = append(yyDollar[1].sources, yyDollar[3].sources...)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = []Source{yyDollar[1].ment}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:703
		{
			yyDollar[1].ment.Alias = yyDollar[3].str
			yyVAL.sources = append([]Source{yyDollar[1].ment}, yyDollar[5].sources...)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.sources = []Source{yyDollar[1].source}
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:714
		{
			join := &Join{}
			if len(yyDollar[1].sources) != 1 || len(yyDollar[4].sources) != 1 {
				yylex.Error("only support one query for join")
			}
			join.LSrc = yyDollar[1].sources[0]
			join.RSrc = yyDollar[4].sources[0]
			join.Condition = yyDollar[6].expr
			yyVAL.source = join
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			all_subquerys := []Source{}
			for _, temp_stmt := range yyDollar[2].stmts {
				stmt, ok := temp_stmt.(*SelectStatement)
				if !ok {
					yylex.Error("expexted SelectStatement")
				}
				build_SubQuery := &SubQuery{Statement: stmt}
				all_subquerys = append(all_subquerys, build_SubQuery)
			}
			yyVAL.sources = all_subquerys
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:740
		{
			if len(yyDollar[2].stmts) != 1 {
				yylex.Error("expexted SelectStatement length")
			}
			all_subquerys := []Source{}
			stmt, ok := yyDollar[2].stmts[0].(*SelectStatement)
			if !ok {
				yylex.Error("expexted SelectStatement")
			}
			build_SubQuery := &SubQuery{
				Statement: stmt,
				Alias:     yyDollar[5].str,
			}
			all_subquerys = append(all_subquerys, build_SubQuery)
			yyVAL.sources = all_subquerys
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:757
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:769
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:776
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:782
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:788
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.ment = &Measurement{Name: yyDollar[1].str}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:823
		{
			yyVAL.dimens = nil
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.dimens = []*Dimension{yyDollar[1].dimen}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:833
		{
			yyVAL.dimens = append([]*Dimension{yyDollar[1].dimen}, yyDollar[3].dimens...)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.str = yyDollar[1].str
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.str = yyDollar[1].str
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.dimen = &Dimension{Expr: &VarRef{Val: yyDollar[1].str}}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:857
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}}}}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:865
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: yyDollar[5].tdur}}}}
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:873
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &Dimension{Expr: &Call{Name: "time", Args: []Expr{&DurationLiteral{Val: yyDollar[3].tdur}, &DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}}}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:885
		{
			yyVAL.dimen = &Dimension{Expr: &Wildcard{Type: Token(yyDollar[1].int)}}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &Dimension{Expr: &RegexLiteral{Val: re}}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:900
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:911
		{
			yyVAL.location = nil
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:917
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:921
		{
			yyVAL.inter = "null"
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:935
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.expr = nil
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:975
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:979
		{
			ident := &VarRef{Val: yyDollar[1].str}
			var expr, e Expr
			for i := range yyDollar[4].fields {
				expr = &BinaryExpr{LHS: ident, Op: Token(EQ), RHS: yyDollar[4].fields[i].Expr}
				if e == nil {
					e = expr
				} else {
					e = &BinaryExpr{LHS: e, Op: Token(OR), RHS: expr}
				}
			}
			yyVAL.expr = e
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:993
		{
			yyVAL.expr = &InCondition{Stmt: yyDollar[4].stmt.(*SelectStatement), Column: &VarRef{Val: yyDollar[1].str}}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:997
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1001
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1005
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1009
		{
			yyVAL.expr = &BinaryExpr{}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1013
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCH,
			}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1021
		{
			yyVAL.expr = &BinaryExpr{
				LHS: &VarRef{Val: yyDollar[3].str},
				RHS: &StringLiteral{Val: yyDollar[5].str},
				Op:  MATCHPHRASE,
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			if yyDollar[2].int == NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &BinaryExpr{Op: Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1048
		{
			yyVAL.expr = &ParenExpr{Expr: yyDollar[2].expr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.int = EQ
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.int = NEQ
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.int = LT
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.int = LTE
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.int = GT
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.int = GTE
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.int = EQREGEX
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.int = NEQREGEX
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.int = LIKE
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.str = yyDollar[1].str
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.expr = &NumberLiteral{Val: yyDollar[1].float64}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.expr = &IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.expr = &StringLiteral{Val: yyDollar[1].str}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.expr = &BooleanLiteral{Val: true}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.expr = &BooleanLiteral{Val: false}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &RegexLiteral{Val: re}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.expr = &VarRef{Val: yyDollar[1].str + "." + yyDollar[3].str, Type: Tag}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = Float
			case "integer":
				yyVAL.dataType = Integer
			case "string":
				yyVAL.dataType = String
			case "boolean":
				yyVAL.dataType = Boolean
			case "time":
				yyVAL.dataType = Time
			case "duration":
				yyVAL.dataType = Duration
			case "unsigned":
				yyVAL.dataType = Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.dataType = Tag
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.dataType = AnyField
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1179
		{
			yyVAL.sortfs = nil
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.sortfs = []*SortField{yyDollar[1].sortf}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.sortfs = append([]*SortField{yyDollar[1].sortf}, yyDollar[3].sortfs...)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.sortf = &SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1209
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.int64 = yyDollar[1].int64
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			if n, ok := yyDollar[1].expr.(*IntegerLiteral); ok {
				yyVAL.int64 = n.Val
			} else {
				yylex.Error("unsupported type, expect integer type")
			}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1230
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1242
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1248
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1252
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1260
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.stmt = &ShowDatabasesStatement{ShowDetail: true}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1276
		{
			sms := yyDollar[4].stmt

			sms.(*CreateDatabaseStatement).Name = yyDollar[3].str
			sms.(*CreateDatabaseStatement).DatabaseAttr = yyDollar[5].databasePolicy
			yyVAL.stmt = sms
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1284
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			stmt.DatabaseAttr = yyDollar[4].databasePolicy
			yyVAL.stmt = stmt
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: false}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: yyDollar[1].bool}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1304
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[2].int64), EnableTagArray: yyDollar[3].bool}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.databasePolicy = DatabasePolicy{Replicas: uint32(yyDollar[3].int64), EnableTagArray: yyDollar[1].bool}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1313
		{
			yyVAL.databasePolicy = DatabasePolicy{EnableTagArray: false}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1319
		{
			if strings.ToLower(yyDollar[3].str) != "array" {
				yylex.Error("unsupport type")
			}
			yyVAL.bool = true
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.bool = false
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1333
		{
			stmt := &CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			yyVAL.stmt = stmt
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1459
		{
			duration := yyDollar[2].tdur
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyDuration: &duration}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			if yyDollar[2].int64 < 1 || yyDollar[2].int64 > 2 {
				yylex.Error("REPLICATION must be 1 <= n <= 2")
			}
			replicaN := int(yyDollar[2].int64)
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, Replication: &replicaN}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyName: yyDollar[2].str}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1476
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, ReplicaNum: uint32(yyDollar[2].int64)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: true}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: false}
		}
	case 214:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1495
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Source = yyDollar[6].ment
			sms.Condition = yyDollar[7].expr
			sms.SortFields = yyDollar[8].sortfs
			sms.Limit = yyDollar[9].intSlice[0]
			sms.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = sms
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1506
		{
			sms := &ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Condition = yyDollar[4].expr
			sms.SortFields = yyDollar[5].sortfs
			sms.Limit = yyDollar[6].intSlice[0]
			sms.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = sms
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.ment = &Measurement{Name: yyDollar[2].str}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1527
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &Measurement{Regex: &RegexLiteral{Val: re}}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1547
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.stmt = &ShowRetentionPoliciesStatement{}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1560
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1567
		{
			stmt := yyDollar[7].stmt.(*CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1577
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 225:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1584
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1592
		{
			stmt := &CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1603
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2 {
				yylex.Error("REPLICATION must be 1 <= n <= 2")
			}
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			yyVAL.stmt = stmt
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			stmt := &CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2 {
				yylex.Error("REPLICATION must be 1 <= n <= 2")
			}
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1655
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1693
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1697
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1701
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1705
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1713
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Sources = yyDollar[4].sources
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1724
		{
			stmt := &ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.stmt = &ShowUsersStatement{}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			stmt := &DropDatabaseStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1750
		{
			stmt := &DropSeriesStatement{}
			stmt.Sources = yyDollar[3].sources
			stmt.Condition = yyDollar[4].expr
			yyVAL.stmt = stmt
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1757
		{
			stmt := &DropSeriesStatement{}
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Sources = yyDollar[2].sources
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			stmt := &DeleteSeriesStatement{}
			stmt.Condition = yyDollar[2].expr
			yyVAL.stmt = stmt
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			stmt := &AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1819
		{
			stmt := &DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1828
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1836
		{
			stmt := &GrantStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1844
		{
			stmt := &GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1861
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[5].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1865
		{
			yyVAL.stmt = &GrantAdminStatement{User: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1871
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1879
		{
			stmt := &RevokeStatement{}
			stmt.Privilege = AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1887
		{
			stmt := &RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = ReadPrivilege
			case "write":
				stmt.Privilege = WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1904
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.stmt = &RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.stmt = &DropUserStatement{Name: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1920
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]
			yyVAL.stmt = stmt

		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1934
		{
			stmt := &ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			stmt.SLimit = yyDollar[7].intSlice[2]
			stmt.SOffset = yyDollar[7].intSlice[3]
			yyVAL.stmt = stmt
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = "PRIMARYKEY"
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = "SORTKEY"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = "PROPERTY"
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = "SHARDKEY"
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.str = "ENGINETYPE"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1968
		{
			yyVAL.str = "SCHEMA"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = "INDEXES"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yylex.Error("SHOW command error, only support PRIMARYKEY, SORTKEY, SHARDKEY, ENGINETYPE, INDEXES, SCHEMA")
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1982
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 267:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1989
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Rp = yyDollar[6].str
			stmt.Measurement = yyDollar[8].str
			yyVAL.stmt = stmt
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1998
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Database = yyDollar[4].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2006
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Rp = yyDollar[5].str
			stmt.Measurement = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2014
		{
			stmt := &ShowMeasurementKeysStatement{}
			stmt.Name = yyDollar[2].str
			stmt.Measurement = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = yyDollar[2].str
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2027
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2033
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2043
		{
			stmt := &ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 275:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2055
		{
			stmt := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt

		}
	case 276:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2068
		{
			stmt := yyDollar[7].stmt.(*ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2095
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = IN
			stmt.TagKeyExpr = yyDollar[3].expr.(*ListLiteral)
			yyVAL.stmt = stmt
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			stmt := &ShowTagValuesStatement{}
			stmt.Op = NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &ListLiteral{Vals: temp}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyDollar[3].expr.(*ListLiteral).Vals = append(yyDollar[3].expr.(*ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.str = yyDollar[1].str
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[3].stmt.(*SelectStatement)
			stmt.Analyze = true
			yyVAL.stmt = stmt
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			stmt := &ExplainStatement{}
			stmt.Statement = yyDollar[2].stmt.(*SelectStatement)
			stmt.Analyze = false
			yyVAL.stmt = stmt
		}
	case 287:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2164
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 288:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2176
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2187
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 290:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2199
		{
			stmt := &ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 291:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:2215
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt_temp := yyDollar[10].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[11].expr
			stmt.Dimensions = yyDollar[12].dimens
			stmt.Limit = yyDollar[13].intSlice[0]
			stmt.Offset = yyDollar[13].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 292:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2232
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 293:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2247
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt_temp := yyDollar[9].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 294:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2264
		{
			stmt := &ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt_temp := yyDollar[8].stmt.(*ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[9].expr
			stmt.Dimensions = yyDollar[10].dimens
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 295:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2282
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 296:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2294
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 297:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2305
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2317
		{
			stmt := &ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2331
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.EngineType = yyDollar[5].cmOption.EngineType

			yyVAL.stmt = stmt
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2350
		{
			stmt := &CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[4].stmt != nil {
				stmt.Fields = yyDollar[4].stmt.(*CreateMeasurementStatement).Fields
				stmt.Tags = yyDollar[4].stmt.(*CreateMeasurementStatement).Tags
				stmt.IndexOption = yyDollar[4].stmt.(*CreateMeasurementStatement).IndexOption
			}
			// check if PrimaryKey & SortKey is IN Tags/Fields/time
			for _, key := range yyDollar[5].cmOption.PrimaryKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid PrimaryKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			for _, key := range yyDollar[5].cmOption.SortKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField && key != "time" {
					if len(yyDollar[5].cmOption.PrimaryKey) != len(yyDollar[5].cmOption.SortKey) {
						yylex.Error("Invalid SortKey")
					} else {
						yylex.Error("Invalid PrimaryKey/SortKey")
					}
					return 1
				}
			}
			// check if ShardKey is IN Tags/Fields
			for _, key := range yyDollar[5].cmOption.ShardKey {
				_, inTag := stmt.Tags[key]
				_, inField := stmt.Fields[key]
				if !inTag && !inField {
					yylex.Error("Invalid ShardKey")
					return 1
				}
			}
			// check if primary key is left prefix of sort key
			if len(yyDollar[5].cmOption.PrimaryKey) > len(yyDollar[5].cmOption.SortKey) {
				yylex.Error("PrimaryKey should be left prefix of SortKey")
				return 1
			}
			for i, v := range yyDollar[5].cmOption.PrimaryKey {
				if v != yyDollar[5].cmOption.SortKey[i] {
					yylex.Error("PrimaryKey should be left prefix of SortKey")
					return 1
				}
			}
			stmt.EngineType = yyDollar[5].cmOption.EngineType
			stmt.IndexType = yyDollar[5].cmOption.IndexType
			stmt.IndexList = yyDollar[5].cmOption.IndexList
			stmt.TimeClusterDuration = yyDollar[5].cmOption.TimeClusterDuration
			stmt.ShardKey = yyDollar[5].cmOption.ShardKey
			stmt.Type = yyDollar[5].cmOption.Type
			stmt.PrimaryKey = yyDollar[5].cmOption.PrimaryKey
			stmt.SortKey = yyDollar[5].cmOption.SortKey
			stmt.Property = yyDollar[5].cmOption.Property
			yyVAL.stmt = stmt
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2418
		{
			option := &CreateMeasurementStatementOption{}
			option.Type = "hash"
			option.EngineType = "tsstore"
			yyVAL.cmOption = option
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2425
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.Type = yyDollar[5].str
			option.EngineType = yyDollar[2].str
			yyVAL.cmOption = option
		}
	case 303:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2441
		{
			option := &CreateMeasurementStatementOption{}
			if yyDollar[3].indexType != nil {
				option.IndexType = yyDollar[3].indexType.types
				option.IndexList = yyDollar[3].indexType.lists
				option.TimeClusterDuration = yyDollar[3].indexType.timeClusterDuration
			}
			if yyDollar[4].strSlice != nil {
				option.ShardKey = yyDollar[4].strSlice
			}
			option.Type = yyDollar[5].str
			option.EngineType = yyDollar[2].str
			if yyDollar[6].strSlice != nil {
				option.PrimaryKey = yyDollar[6].strSlice
			} else if yyDollar[7].strSlice != nil {
				option.PrimaryKey = yyDollar[7].strSlice
			}

			if yyDollar[7].strSlice != nil {
				option.SortKey = yyDollar[7].strSlice
			} else if yyDollar[6].strSlice != nil {
				option.SortKey = yyDollar[6].strSlice
			}
			if yyDollar[8].strSlices != nil {
				option.Property = yyDollar[8].strSlices
			}
			yyVAL.cmOption = option
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2471
		{
			yyVAL.indexType = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			if yyDollar[2].indexType == nil {
				yyVAL.indexType = nil
			} else {
				yyVAL.indexType = yyDollar[2].indexType
			}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2484
		{
			yyVAL.indexType = nil
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2488
		{
			indexType := strings.ToLower(yyDollar[2].str)
			if indexType != "timecluster" {
				yylex.Error("expect TIMECLUSTER for INDEXTYPE")
				return 1
			}
			yyVAL.indexType = &IndexType{
				types:               []string{indexType},
				lists:               nil,
				timeClusterDuration: yyDollar[4].tdur,
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2502
		{
			yyVAL.strSlice = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			shardKey := yyDollar[2].strSlice
			sort.Strings(shardKey)
			yyVAL.strSlice = shardKey
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = "tsstore" // default engine type
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = "tsstore"
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2523
		{
			yyVAL.str = "columnstore"
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2528
		{
			yyVAL.strSlice = nil
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2536
		{
			yyVAL.strSlice = nil
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.strSlice = yyDollar[1].strSlice
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2544
		{
			yyVAL.strSlices = nil
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			stmt := &CreateMeasurementStatement{
				Tags:   make(map[string]int32),
				Fields: make(map[string]int32),
			}
			for i := range yyDollar[2].fieldOptions {
				fType := yyDollar[2].fieldOptions[i].tagOrField
				if fType == "tag" {
					stmt.Tags[yyDollar[2].fieldOptions[i].fieldName] = influx.Field_Type_Tag
				} else if fType == "field" {
					fieldType := strings.ToLower(yyDollar[2].fieldOptions[i].fieldType)
					fieldName := yyDollar[2].fieldOptions[i].fieldName
					if fieldType == "int64" {
						stmt.Fields[fieldName] = influx.Field_Type_Int
					} else if fieldType == "float64" {
						stmt.Fields[fieldName] = influx.Field_Type_Float
					} else if fieldType == "string" {
						stmt.Fields[fieldName] = influx.Field_Type_String
					} else if fieldType == "bool" {
						stmt.Fields[fieldName] = influx.Field_Type_Boolean
					} else {
						yylex.Error("expect FLOAT64, INT64, BOOL, STRING for column data type")
						return 1 // syntax error
					}
				}
			}
			yyVAL.stmt = stmt
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2582
		{
			yyVAL.stmt = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			fields := []*fieldList{yyDollar[1].fieldOption}
			yyVAL.fieldOptions = append(fields, yyDollar[2].fieldOptions...)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.fieldOptions = []*fieldList{yyDollar[1].fieldOption}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2605
		{
			yyVAL.fieldOption = yyDollar[1].fieldOption
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  "string",
				tagOrField: "tag",
			}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2629
		{
			yyVAL.fieldOption = &fieldList{
				fieldName:  yyDollar[1].str,
				fieldType:  yyDollar[2].str,
				tagOrField: "field",
			}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			indextype := yyDollar[1].indexType
			if yyDollar[2].indexType != nil {
				indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			}
			yyVAL.indexType = indextype
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
			yyVAL.indexType = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{

			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			shardType := strings.ToLower(yyDollar[2].str)
			if shardType != "hash" && shardType != "range" {
				yylex.Error("expect HASH or RANGE for TYPE")
				return 1
			}
			yyVAL.str = shardType
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = "hash"
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2689
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2695
		{
			yyVAL.strSlice = yyDollar[2].strSlice
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2701
		{
			m := yyDollar[1].strSlices
			if yyDollar[3].strSlices != nil {
				m[0] = append(m[0], yyDollar[3].strSlices[0]...)
				m[1] = append(m[1], yyDollar[3].strSlices[1]...)
			}
			yyVAL.strSlices = m
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.strSlices = yyDollar[1].strSlices
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.strSlices = yyDollar[2].strSlices
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2723
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {yyDollar[3].str}}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.strSlices = [][]string{{yyDollar[1].str}, {fmt.Sprintf("%d", yyDollar[3].int64)}}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2731
		{
			yyVAL.strSlices = nil
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.str = yyDollar[1].str
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			stmt := &DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2760
		{
			stmt := &SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			stmt := &ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 349:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2779
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 350:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2791
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2802
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2814
		{
			stmt := &ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2828
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2840
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 355:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2851
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2863
		{
			stmt := &ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2877
		{
			stmt := &ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2885
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2896
		{
			stmt := &AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2910
		{
			stmt := &ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			stmt := &DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 362:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2926
		{
			stmt := &CreateContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
				Source:   yyDollar[9].stmt.(*SelectStatement),
			}
			if yyDollar[7].cqsp != nil {
				stmt.ResampleEvery = yyDollar[7].cqsp.ResampleEvery
				stmt.ResampleFor = yyDollar[7].cqsp.ResampleFor
			}
			yyVAL.stmt = stmt
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2941
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleFor: yyDollar[3].tdur,
			}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2953
		{
			yyVAL.cqsp = &cqSamplePolicyInfo{
				ResampleEvery: yyDollar[3].tdur,
				ResampleFor:   yyDollar[5].tdur,
			}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2960
		{
			yyVAL.cqsp = nil
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.stmt = &ShowContinuousQueriesStatement{}
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2972
		{
			yyVAL.stmt = &DropContinuousQueryStatement{
				Name:     yyDollar[4].str,
				Database: yyDollar[6].str,
			}
		}
	case 369:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2980
		{
			stmt := yyDollar[9].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[4].str
			stmt.Ops = yyDollar[6].fields
			yyVAL.stmt = stmt
		}
	case 370:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2987
		{
			stmt := yyDollar[11].stmt.(*CreateDownSampleStatement)
			stmt.RpName = yyDollar[6].str
			stmt.DbName = yyDollar[4].str
			stmt.Ops = yyDollar[8].fields
			yyVAL.stmt = stmt
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2995
		{
			stmt := yyDollar[7].stmt.(*CreateDownSampleStatement)
			stmt.Ops = yyDollar[4].fields
			yyVAL.stmt = stmt
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3003
		{
			yyVAL.stmt = &DropDownSampleStatement{
				RpName: yyDollar[4].str,
			}
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3009
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName: yyDollar[4].str,
				RpName: yyDollar[6].str,
			}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DropAll: true,
			}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3022
		{
			yyVAL.stmt = &DropDownSampleStatement{
				DbName:  yyDollar[4].str,
				DropAll: true,
			}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.stmt = &ShowDownSampleStatement{}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3035
		{
			yyVAL.stmt = &ShowDownSampleStatement{
				DbName: yyDollar[4].str,
			}
		}
	case 378:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3043
		{
			yyVAL.stmt = &CreateDownSampleStatement{
				Duration:       yyDollar[2].tdur,
				SampleInterval: yyDollar[5].tdurs,
				TimeInterval:   yyDollar[9].tdurs,
			}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.tdurs = []time.Duration{yyDollar[1].tdur}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.tdurs = append([]time.Duration{yyDollar[1].tdur}, yyDollar[3].tdurs...)
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3064
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
				Delay: yyDollar[8].tdur,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3086
		{
			stmt := &CreateStreamStatement{
				Name:  yyDollar[3].str,
				Query: yyDollar[6].stmt,
			}
			if len(yyDollar[4].sources) > 1 {
				yylex.Error("into clause only support one target")
			}
			if len(yyDollar[4].sources) == 1 {
				mst, ok := yyDollar[4].sources[0].(*Measurement)
				if !ok {
					yylex.Error("into clause only support measurement clause")
				}
				mst.IsTarget = true
				stmt.Target = &Target{
					Measurement: mst,
				}
			}
			yyVAL.stmt = stmt
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.stmt = &ShowStreamsStatement{}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3113
		{
			yyVAL.stmt = &ShowStreamsStatement{Database: yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3119
		{
			yyVAL.stmt = &DropStreamsStatement{Name: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.stmt = &ShowQueriesStatement{}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.stmt = &KillQueryStatement{QueryID: uint64(yyDollar[3].int64)}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.str = "ALL"
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.str = "ANY"
		}
	case 392:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:3155
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str, Destinations: yyDollar[10].strSlice, Mode: yyDollar[9].str}
		}
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3159
		{
			yyVAL.stmt = &CreateSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: "", Destinations: yyDollar[8].strSlice, Mode: yyDollar[7].str}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.stmt = &ShowSubscriptionsStatement{}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: "", RetentionPolicy: ""}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3175
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: "", Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3179
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: yyDollar[7].str}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3183
		{
			yyVAL.stmt = &DropSubscriptionStatement{Name: yyDollar[3].str, Database: yyDollar[5].str, RetentionPolicy: ""}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3189
		{
			stmt := &ShowConfigsStatement{}
			yyVAL.stmt = stmt
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3196
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3204
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].int64
			yyVAL.stmt = stmt
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3212
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].float64
			yyVAL.stmt = stmt
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3220
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3228
		{
			stmt := &SetConfigStatement{}
			stmt.Component = yyDollar[3].str
			stmt.Key = yyDollar[4].str
			stmt.Value = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	}
	goto yystack /* stack new state and value */
}
