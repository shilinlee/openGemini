// Code generated by goyacc sql.y. DO NOT EDIT.

//line sql.y:2
/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package yacc

import (
	__yyfmt__ "fmt"
	"regexp"
	"sort"
	"strings"
	"time"
	"unsafe"

	"github.com/openGemini/openGemini/open_src/influx/influxql"
	"github.com/openGemini/openGemini/open_src/influx/query"
)

func setParseTree(yylex interface{}, stmts influxql.Statements) {
	for _, stmt := range stmts {
		yylex.(*YyParser).Query.Statements = append(yylex.(*YyParser).Query.Statements, stmt)
	}
}

func deal_Fill(fill interface{}) (influxql.FillOption, interface{}, bool) {
	switch fill.(type) {
	case string:
		switch fill {
		case "null":
			return 0, nil, true
		case "none":
			return 1, nil, true
		case "previous":
			return 3, nil, true
		case "linear":
			return 4, nil, true
		default:
			return -1, nil, false
		}
	case int64:
		return 2, fill.(int64), true
	case float64:
		return 2, fill.(float64), true
	default:
		return -1, nil, false
	}
}

//line sql.y:64
type yySymType struct {
	yys              int
	stmt             influxql.Statement
	stmts            influxql.Statements
	str              string
	query            influxql.Query
	field            *influxql.Field
	fields           influxql.Fields
	sources          influxql.Sources
	sortfs           influxql.SortFields
	sortf            *influxql.SortField
	ment             *influxql.Measurement
	subQuery         *influxql.SubQuery
	dimens           influxql.Dimensions
	dimen            *influxql.Dimension
	int              int
	int64            int64
	float64          float64
	dataType         influxql.DataType
	expr             influxql.Expr
	tdur             time.Duration
	bool             bool
	groupByCondition *GroupByCondition
	intSlice         []int
	inter            interface{}
	durations        *Durations
	hints            influxql.Hints
	strSlice         []string
	location         *time.Location
	indexType        *IndexType
}

const FROM = 57346
const MEASUREMENT = 57347
const ON = 57348
const SELECT = 57349
const WHERE = 57350
const AS = 57351
const GROUP = 57352
const BY = 57353
const ORDER = 57354
const LIMIT = 57355
const OFFSET = 57356
const SLIMIT = 57357
const SOFFSET = 57358
const SHOW = 57359
const CREATE = 57360
const FULL = 57361
const PRIVILEGES = 57362
const OUTER = 57363
const JOIN = 57364
const TO = 57365
const IN = 57366
const NOT = 57367
const EXISTS = 57368
const REVOKE = 57369
const FILL = 57370
const DELETE = 57371
const WITH = 57372
const ALL = 57373
const PASSWORD = 57374
const NAME = 57375
const REPLICANUM = 57376
const ALTER = 57377
const USER = 57378
const USERS = 57379
const DATABASES = 57380
const DATABASE = 57381
const MEASUREMENTS = 57382
const RETENTION = 57383
const POLICIES = 57384
const POLICY = 57385
const DURATION = 57386
const DEFAULT = 57387
const SHARD = 57388
const INDEX = 57389
const GRANT = 57390
const HOT = 57391
const WARM = 57392
const TYPE = 57393
const SET = 57394
const FOR = 57395
const GRANTS = 57396
const REPLICATION = 57397
const SERIES = 57398
const DROP = 57399
const CASE = 57400
const WHEN = 57401
const THEN = 57402
const ELSE = 57403
const END = 57404
const TRUE = 57405
const FALSE = 57406
const TAG = 57407
const FIELD = 57408
const KEYS = 57409
const VALUES = 57410
const KEY = 57411
const EXPLAIN = 57412
const ANALYZE = 57413
const EXACT = 57414
const CARDINALITY = 57415
const SHARDKEY = 57416
const CONTINUOUS = 57417
const DIAGNOSTICS = 57418
const QUERIES = 57419
const QUERIE = 57420
const SHARDS = 57421
const STATS = 57422
const SUBSCRIPTIONS = 57423
const SUBSCRIPTION = 57424
const GROUPS = 57425
const INDEXTYPE = 57426
const INDEXLIST = 57427
const QUERY = 57428
const PARTITION = 57429
const DESC = 57430
const ASC = 57431
const COMMA = 57432
const SEMICOLON = 57433
const LPAREN = 57434
const RPAREN = 57435
const REGEX = 57436
const EQ = 57437
const NEQ = 57438
const LT = 57439
const LTE = 57440
const GT = 57441
const GTE = 57442
const DOT = 57443
const DOUBLECOLON = 57444
const NEQREGEX = 57445
const EQREGEX = 57446
const IDENT = 57447
const INTEGER = 57448
const DURATIONVAL = 57449
const STRING = 57450
const NUMBER = 57451
const HINT = 57452
const AND = 57453
const OR = 57454
const ADD = 57455
const SUB = 57456
const BITWISE_OR = 57457
const BITWISE_XOR = 57458
const MUL = 57459
const DIV = 57460
const MOD = 57461
const BITWISE_AND = 57462
const UMINUS = 57463

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"FROM",
	"MEASUREMENT",
	"ON",
	"SELECT",
	"WHERE",
	"AS",
	"GROUP",
	"BY",
	"ORDER",
	"LIMIT",
	"OFFSET",
	"SLIMIT",
	"SOFFSET",
	"SHOW",
	"CREATE",
	"FULL",
	"PRIVILEGES",
	"OUTER",
	"JOIN",
	"TO",
	"IN",
	"NOT",
	"EXISTS",
	"REVOKE",
	"FILL",
	"DELETE",
	"WITH",
	"ALL",
	"PASSWORD",
	"NAME",
	"REPLICANUM",
	"ALTER",
	"USER",
	"USERS",
	"DATABASES",
	"DATABASE",
	"MEASUREMENTS",
	"RETENTION",
	"POLICIES",
	"POLICY",
	"DURATION",
	"DEFAULT",
	"SHARD",
	"INDEX",
	"GRANT",
	"HOT",
	"WARM",
	"TYPE",
	"SET",
	"FOR",
	"GRANTS",
	"REPLICATION",
	"SERIES",
	"DROP",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TRUE",
	"FALSE",
	"TAG",
	"FIELD",
	"KEYS",
	"VALUES",
	"KEY",
	"EXPLAIN",
	"ANALYZE",
	"EXACT",
	"CARDINALITY",
	"SHARDKEY",
	"CONTINUOUS",
	"DIAGNOSTICS",
	"QUERIES",
	"QUERIE",
	"SHARDS",
	"STATS",
	"SUBSCRIPTIONS",
	"SUBSCRIPTION",
	"GROUPS",
	"INDEXTYPE",
	"INDEXLIST",
	"QUERY",
	"PARTITION",
	"DESC",
	"ASC",
	"COMMA",
	"SEMICOLON",
	"LPAREN",
	"RPAREN",
	"REGEX",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"DOT",
	"DOUBLECOLON",
	"NEQREGEX",
	"EQREGEX",
	"IDENT",
	"INTEGER",
	"DURATIONVAL",
	"STRING",
	"NUMBER",
	"HINT",
	"AND",
	"OR",
	"ADD",
	"SUB",
	"BITWISE_OR",
	"BITWISE_XOR",
	"MUL",
	"DIV",
	"MOD",
	"BITWISE_AND",
	"UMINUS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:2265

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 333,
	95, 125,
	96, 125,
	97, 125,
	98, 125,
	99, 125,
	100, 125,
	103, 125,
	104, 125,
	-2, 114,
}

const yyPrivate = 57344

const yyLast = 779

var yyAct = [...]int{
	364, 306, 632, 251, 281, 565, 465, 537, 572, 499,
	363, 273, 417, 454, 399, 4, 435, 146, 398, 407,
	304, 168, 239, 2, 197, 351, 624, 51, 157, 109,
	110, 114, 115, 91, 61, 162, 67, 125, 169, 65,
	66, 121, 68, 432, 111, 112, 116, 113, 109, 110,
	114, 115, 61, 438, 625, 509, 441, 65, 66, 333,
	406, 626, 279, 637, 101, 439, 243, 244, 56, 199,
	68, 577, 561, 243, 244, 90, 492, 243, 244, 55,
	105, 57, 63, 60, 64, 62, 56, 491, 68, 187,
	58, 55, 188, 54, 490, 117, 161, 120, 68, 57,
	63, 60, 64, 62, 52, 145, 489, 394, 58, 144,
	128, 54, 147, 243, 244, 621, 180, 516, 517, 151,
	148, 518, 610, 582, 156, 68, 68, 104, 526, 148,
	108, 525, 148, 322, 184, 355, 413, 321, 182, 147,
	147, 453, 202, 203, 40, 55, 198, 452, 189, 190,
	191, 192, 193, 194, 195, 196, 397, 55, 395, 209,
	207, 150, 213, 154, 205, 206, 359, 360, 215, 216,
	217, 98, 222, 61, 362, 361, 227, 634, 65, 66,
	96, 183, 201, 566, 235, 242, 111, 112, 116, 113,
	109, 110, 114, 115, 68, 539, 573, 468, 124, 605,
	246, 145, 456, 245, 212, 144, 419, 56, 147, 68,
	567, 400, 513, 512, 502, 409, 446, 275, 285, 445,
	57, 63, 60, 64, 62, 431, 522, 298, 429, 58,
	428, 426, 54, 424, 111, 112, 116, 113, 109, 110,
	114, 115, 419, 277, 122, 99, 284, 415, 405, 288,
	290, 323, 286, 396, 97, 356, 348, 294, 347, 296,
	344, 303, 300, 328, 301, 336, 326, 327, 466, 467,
	148, 343, 283, 338, 148, 148, 470, 469, 68, 331,
	332, 272, 271, 270, 267, 266, 369, 354, 265, 368,
	262, 287, 289, 291, 260, 375, 520, 236, 297, 385,
	373, 234, 384, 302, 111, 112, 116, 113, 109, 110,
	114, 115, 230, 247, 248, 392, 225, 210, 357, 155,
	371, 372, 153, 374, 149, 142, 393, 140, 118, 107,
	383, 378, 411, 381, 388, 390, 391, 386, 119, 410,
	412, 324, 414, 252, 253, 254, 255, 256, 257, 350,
	418, 259, 258, 422, 233, 160, 433, 642, 636, 148,
	425, 148, 370, 608, 635, 50, 607, 330, 614, 457,
	379, 574, 382, 571, 461, 423, 387, 389, 245, 462,
	442, 118, 606, 459, 460, 479, 463, 570, 508, 504,
	440, 119, 444, 487, 503, 478, 421, 276, 447, 448,
	483, 541, 485, 486, 458, 521, 434, 420, 337, 334,
	249, 500, 50, 604, 587, 476, 477, 529, 530, 496,
	481, 482, 528, 484, 519, 505, 488, 238, 497, 501,
	237, 106, 498, 507, 562, 511, 506, 139, 126, 143,
	341, 589, 320, 299, 514, 510, 295, 523, 148, 524,
	488, 171, 319, 126, 471, 223, 224, 475, 220, 221,
	532, 533, 480, 137, 138, 293, 226, 214, 546, 545,
	531, 535, 578, 534, 40, 540, 134, 61, 135, 551,
	474, 547, 65, 66, 555, 464, 557, 558, 549, 550,
	563, 377, 576, 553, 554, 278, 556, 443, 204, 536,
	131, 132, 133, 559, 218, 219, 542, 543, 124, 548,
	600, 56, 181, 68, 552, 564, 185, 186, 569, 129,
	130, 136, 3, 560, 57, 63, 60, 64, 62, 494,
	404, 89, 584, 58, 579, 580, 575, 403, 100, 402,
	401, 586, 583, 313, 316, 170, 314, 315, 152, 588,
	594, 595, 590, 591, 597, 598, 440, 599, 141, 127,
	593, 318, 87, 95, 596, 84, 102, 86, 544, 585,
	93, 83, 88, 103, 603, 167, 166, 92, 495, 473,
	92, 592, 85, 376, 261, 92, 232, 612, 609, 231,
	611, 229, 208, 352, 619, 613, 615, 620, 250, 94,
	263, 172, 82, 472, 618, 80, 380, 81, 61, 623,
	622, 292, 627, 65, 66, 173, 335, 264, 174, 631,
	427, 345, 342, 633, 616, 617, 416, 61, 629, 630,
	639, 640, 65, 66, 329, 633, 641, 602, 601, 643,
	638, 241, 164, 581, 68, 527, 178, 367, 176, 628,
	450, 451, 77, 365, 366, 165, 63, 60, 64, 62,
	92, 339, 177, 68, 58, 282, 353, 274, 282, 92,
	93, 40, 568, 93, 57, 63, 60, 64, 62, 269,
	126, 268, 340, 58, 73, 69, 325, 70, 71, 317,
	211, 179, 175, 79, 309, 310, 280, 430, 349, 346,
	92, 76, 408, 72, 437, 307, 311, 313, 316, 40,
	314, 315, 74, 75, 538, 305, 308, 515, 449, 41,
	42, 436, 455, 200, 123, 59, 78, 163, 358, 47,
	158, 44, 240, 159, 1, 312, 53, 45, 39, 38,
	37, 36, 35, 34, 33, 32, 31, 30, 29, 28,
	46, 27, 26, 25, 49, 24, 23, 20, 19, 43,
	21, 18, 22, 17, 16, 15, 13, 14, 12, 11,
	493, 7, 48, 10, 9, 8, 228, 6, 5,
}

var yyPact = [...]int{
	702, -1000, 321, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-6, 647, 566, 526, 665, 558, 149, 140, 467, 534,
	702, 696, 115, 341, 227, 121, 419, 236, 419, -1000,
	-1000, 139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	674, 517, 447, -1000, 433, 409, 468, 391, -1000, 354,
	222, 515, 220, 100, 219, 665, 505, 217, 57, 214,
	662, -1000, 4, 550, 502, 100, 595, 686, 642, 685,
	664, -1000, 459, -1000, 662, 696, 115, 451, -16, 419,
	419, 419, 419, 419, 419, 419, 419, -69, -24, 77,
	-1000, 437, 449, 449, 550, 562, 212, 684, 665, 394,
	674, 674, 432, 386, 674, 383, 211, 393, 674, -1000,
	561, 207, 559, 556, 253, 196, -1000, -1000, -1000, -1000,
	662, -1000, 192, -1000, -1000, -1000, -1000, -1000, 340, 337,
	622, 702, -45, -1000, 550, 289, 318, 572, 248, 191,
	189, 554, 185, 594, 183, 180, 179, 675, 178, 177,
	-1000, 176, 657, 662, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -88, -88, -88, -1000, -1000, -88, -1000, 304, -1000,
	-1000, -1000, -1000, -1000, 419, 434, -1000, 2, 691, 653,
	-1000, 167, 662, 653, 674, 665, 665, 581, 392, 674,
	373, 674, 656, 370, 674, -1000, 674, 665, -1000, 661,
	683, 529, 368, 32, 240, -1000, 680, 4, 4, -1000,
	622, 613, 274, 550, 550, -69, -34, 317, 592, 664,
	316, 569, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	676, 366, 599, 166, 155, -1000, 598, 695, 153, 151,
	-1000, 694, 254, 565, 655, 657, -1000, 73, 150, 419,
	71, 640, 636, -1000, 653, 640, 665, 662, 657, 662,
	653, 553, 422, 674, 576, 674, 665, 653, 640, 674,
	665, 665, 662, 657, -1000, 661, -1000, 0, 52, 148,
	50, -1000, 106, 496, 495, 493, 486, 143, -48, 110,
	106, 231, 31, -1000, 31, 142, -1000, -1000, -1000, 604,
	-1000, -1000, -1000, -1000, 137, 315, 303, 664, -1000, 550,
	128, 106, 126, 597, -1000, 125, 123, 693, -1000, 120,
	-65, 653, 314, -52, 565, -1000, 435, 191, 662, 114,
	111, 184, 184, -1000, 635, 41, 35, 97, 640, -1000,
	662, 657, 657, 640, 653, 640, 416, 173, 573, 549,
	411, 665, 662, 657, 640, -1000, 665, 662, 657, 662,
	657, 657, 640, -1000, -1000, -1000, -1000, -1000, 336, -1000,
	-1000, -1, -13, -20, -31, 485, 548, 345, 110, 347,
	360, 31, -1000, -1000, -1000, -1000, 109, 301, 296, 335,
	137, -1000, 295, -38, 661, 360, -1000, 108, -1000, -1000,
	107, -1000, -1000, 640, 12, -1000, 334, 194, 313, 124,
	-1000, -1000, 653, -1000, 653, -1000, -1000, -1000, -1000, -1000,
	25, 22, 631, -1000, -1000, 332, 329, -1000, 657, 640,
	640, -1000, 640, -1000, 173, 662, 90, 90, 309, 184,
	184, 538, 400, 399, 173, 662, 657, 657, 640, -1000,
	662, 657, 657, 640, 657, 640, 640, -1000, 106, -1000,
	-1000, -1000, -1000, 478, -35, 403, 106, -1000, 78, -1000,
	105, -1000, 666, -1000, -1000, 101, 294, 280, -1000, -1000,
	-1000, -1000, -1000, -1000, 91, 278, -1000, -1000, -1000, -52,
	427, -36, 407, 640, 640, 627, -1000, 17, 97, -1000,
	-1000, 640, -1000, -1000, -1000, 662, 653, -1000, 324, -1000,
	-1000, 90, -1000, -1000, 372, 173, 173, 662, 657, 640,
	640, -1000, 657, 640, 640, -1000, 640, -1000, -1000, -1000,
	-1000, 455, 618, 617, 360, -1000, 323, -1000, 94, -1000,
	-1000, -1000, -1000, 290, -1000, -1000, -1000, 273, -1000, 91,
	-1000, 16, -1000, -1000, -1000, 653, 640, 90, 275, 173,
	662, 662, 657, 640, -1000, -1000, 640, -1000, -1000, -1000,
	9, -1000, -1000, -1000, 78, 248, -82, -1000, -53, -1000,
	-1000, 640, -1000, -1000, -1000, 662, 657, 657, 640, -1000,
	-1000, 497, -1000, 72, 271, 265, -44, -1000, 657, 640,
	640, -1000, -1000, 497, -1000, -1000, -1000, 264, 640, -1000,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 522, 778, 777, 776, 775, 15, 774, 773, 771,
	770, 769, 768, 767, 766, 765, 764, 763, 762, 761,
	760, 758, 757, 756, 755, 753, 6, 752, 751, 749,
	748, 747, 746, 745, 744, 743, 742, 741, 740, 739,
	738, 27, 12, 736, 734, 23, 75, 28, 733, 17,
	22, 732, 730, 355, 728, 33, 35, 727, 725, 38,
	21, 7, 724, 41, 3, 723, 13, 4, 722, 11,
	16, 721, 10, 0, 718, 25, 717, 2, 1, 715,
	20, 36, 714, 37, 9, 14, 704, 18, 5, 8,
	702, 19,
}

var yyR1 = [...]int{
	0, 44, 45, 45, 45, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 41, 41, 43, 43, 43, 43, 43,
	43, 63, 63, 62, 42, 42, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 46, 47, 47, 47, 47, 48, 52, 53,
	53, 53, 53, 53, 49, 49, 49, 50, 50, 51,
	69, 69, 70, 70, 86, 86, 71, 71, 71, 71,
	71, 71, 71, 71, 89, 89, 75, 75, 76, 76,
	76, 55, 55, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 57, 60, 60, 64, 64, 64, 64,
	64, 64, 64, 64, 81, 58, 58, 58, 58, 58,
	58, 58, 58, 65, 65, 65, 67, 67, 66, 66,
	68, 68, 68, 72, 73, 73, 73, 73, 74, 74,
	74, 74, 2, 3, 3, 4, 80, 80, 79, 79,
	79, 79, 79, 79, 79, 7, 7, 54, 54, 54,
	54, 8, 8, 9, 9, 5, 5, 5, 10, 10,
	77, 77, 78, 78, 78, 78, 11, 11, 12, 14,
	13, 13, 15, 15, 16, 17, 19, 19, 19, 21,
	21, 20, 20, 20, 22, 22, 18, 23, 23, 83,
	83, 24, 24, 25, 25, 26, 26, 26, 26, 26,
	61, 61, 82, 27, 27, 28, 28, 28, 28, 29,
	29, 29, 29, 30, 30, 30, 30, 31, 31, 31,
	31, 90, 91, 91, 88, 88, 84, 84, 87, 87,
	85, 32, 33, 34, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 38, 38, 39, 40,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 9, 10, 1, 3, 1, 3, 3, 1, 3,
	3, 1, 2, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 2, 1, 1,
	5, 6, 2, 1, 3, 1, 3, 3, 2, 5,
	4, 4, 3, 1, 1, 1, 1, 2, 0, 8,
	3, 0, 1, 3, 1, 1, 1, 3, 4, 6,
	7, 1, 3, 1, 4, 0, 4, 0, 1, 1,
	1, 2, 0, 1, 3, 3, 3, 5, 5, 4,
	6, 6, 5, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 3,
	1, 2, 2, 2, 4, 2, 2, 0, 4, 2,
	2, 0, 2, 4, 3, 2, 1, 2, 1, 2,
	2, 2, 2, 1, 2, 9, 6, 2, 2, 2,
	2, 5, 3, 7, 8, 6, 9, 9, 5, 4,
	1, 2, 3, 3, 3, 3, 7, 6, 2, 3,
	4, 3, 3, 2, 7, 6, 6, 7, 6, 5,
	4, 6, 7, 6, 5, 4, 3, 8, 7, 2,
	0, 7, 6, 11, 10, 2, 2, 4, 2, 2,
	1, 3, 1, 3, 2, 10, 9, 9, 8, 13,
	12, 12, 11, 10, 9, 9, 8, 9, 7, 6,
	3, 3, 2, 0, 1, 3, 2, 0, 1, 3,
	1, 3, 6, 4, 9, 8, 8, 7, 9, 8,
	8, 7, 2, 7, 3, 3, 3,
}

var yyChk = [...]int{
	-1000, -44, -45, -1, -6, -2, -3, -9, -5, -7,
	-8, -11, -12, -14, -13, -15, -16, -17, -19, -21,
	-22, -20, -18, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -34, -35, -36, -37, -38, -39, -40,
	7, 17, 18, 57, 29, 35, 48, 27, 70, 52,
	91, -41, 110, -43, 117, -59, 92, 105, 114, -58,
	107, 58, 109, 106, 108, 63, 64, -81, 94, 38,
	40, 41, 56, 37, 65, 66, 54, 5, 79, 46,
	39, 41, 36, 5, 39, 56, 41, 36, 46, 5,
	-46, -55, 4, 8, 41, 5, 31, 105, 31, 105,
	71, -6, 32, -1, -46, -41, 90, 102, 9, 117,
	118, 113, 114, 116, 119, 120, 115, -59, 92, 102,
	-59, -63, 105, -62, 59, -83, 6, 42, -83, 72,
	73, 67, 68, 69, 67, 69, 53, 72, 73, 83,
	105, 43, 105, -53, 105, 101, -49, 108, -81, 105,
	-46, -55, 43, 105, 106, 105, -55, -47, -52, -48,
	-53, 92, -56, -57, 92, 105, 26, 25, -60, -59,
	43, -53, 6, 20, 23, 6, 6, 20, 4, 6,
	-6, 53, -55, -46, -41, 65, 66, 105, 108, -59,
	-59, -59, -59, -59, -59, -59, -59, 93, -41, 93,
	-65, 105, 65, 66, 61, -63, -63, -56, 30, -55,
	105, 6, -46, -55, 73, -83, -83, -83, 72, 73,
	72, 73, -83, 72, 73, 105, 73, -83, -4, 30,
	105, 30, 30, 101, 105, -55, 105, 90, 90, -50,
	-51, 19, -45, 111, 112, -59, -56, 24, 25, 92,
	26, -64, 95, 96, 97, 98, 99, 100, 104, 103,
	105, 30, 105, 6, 23, 105, 105, 105, 6, 4,
	105, 105, 105, -69, 10, -55, 93, -59, 61, 60,
	5, -67, 12, 105, -55, -67, -83, -46, -55, -46,
	-55, -46, 30, 73, -83, 73, -83, -46, -67, 73,
	-83, -83, -46, -55, -80, -79, -78, 44, 55, 33,
	34, 45, 74, 46, 49, 50, 47, 6, 32, 84,
	74, 105, 101, -49, 101, 6, -47, -47, -50, 21,
	93, -56, -56, 93, 92, 24, -6, 92, -60, 92,
	6, 74, 23, 105, 105, 23, 4, 105, 105, 4,
	95, -75, 28, 11, -69, 62, 105, -59, -54, 95,
	96, 104, 103, -72, -73, 13, 14, 11, -67, -73,
	-46, -55, -55, -69, -55, -67, 30, 69, -83, -46,
	30, -83, -46, -55, -67, -73, -83, -46, -55, -46,
	-55, -55, -69, -80, 107, 106, 105, 106, -87, -85,
	105, 44, 44, 44, 44, 105, 108, -91, -90, 105,
	-87, 101, -49, 105, -49, 105, 22, -42, -6, 105,
	92, 93, -6, -56, 105, -87, 105, 23, 105, 105,
	4, 105, 108, -67, 92, -70, -71, -86, 105, 117,
	-81, 108, -75, 62, -55, 105, 105, -81, -81, -74,
	15, 16, 106, 106, -66, -68, 105, -73, -55, -69,
	-69, -73, -67, -72, 69, -26, 95, 96, 24, 104,
	103, -46, 30, 30, 69, -46, -55, -55, -69, -73,
	-46, -55, -55, -69, -55, -69, -69, -73, 90, 107,
	107, 107, 107, -10, 44, 30, 74, -91, 85, -84,
	51, -49, 105, 93, 93, 90, -6, -42, 93, 93,
	-80, -84, 105, 105, -72, -76, 105, 106, 109, 90,
	102, 92, 102, -67, -67, 106, 106, 14, 90, 88,
	89, -69, -73, -73, -72, -26, -55, -61, -82, 105,
	-61, 92, -81, -81, 30, 69, 69, -26, -55, -69,
	-69, -73, -55, -69, -69, -73, -69, -73, -73, -85,
	45, 107, 31, 87, -87, -88, 105, 105, 6, -42,
	93, 93, -89, 105, 93, -70, 65, 107, 65, -72,
	-72, 16, 106, -66, -73, -55, -67, 90, -61, 69,
	-26, -26, -55, -69, -73, -73, -69, -73, -73, -73,
	55, 20, 20, -84, 90, 105, 92, 93, 90, -89,
	106, -67, -73, -61, 93, -26, -55, -55, -69, -73,
	-73, 106, -88, -64, 108, 107, 114, -73, -55, -69,
	-69, -73, -77, -78, 105, 93, 93, 107, -69, -73,
	-73, -77, 93, -73,
}

var yyDef = [...]int{
	0, -2, 1, 2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	3, 0, 0, 43, 45, 48, 0, 135, 0, 68,
	69, 0, 137, 138, 139, 140, 141, 142, 134, 162,
	220, 0, 220, 198, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	112, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 4, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 51, 0, 112, 0, 182, 112, 0,
	220, 220, 220, 0, 220, 0, 0, 0, 220, 275,
	164, 0, 0, 250, 84, 0, 83, 85, 86, 199,
	112, 201, 0, 216, 261, 276, 202, 72, 73, 75,
	88, 0, 111, 113, 0, 135, 0, 0, 0, 124,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 91, 112, 44, 46, 47, 49, 50, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 66,
	136, 143, 144, 145, 0, 0, 52, 0, 0, 147,
	219, 0, 112, 147, 220, 112, 112, 0, 0, 220,
	0, 220, 147, 0, 220, 263, 220, 112, 163, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 78,
	88, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 126, 127, 128, 129, 130, 131, 132, 133,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	215, 0, 0, 107, 0, 91, 65, 0, 0, 0,
	0, 157, 0, 181, 147, 157, 112, 112, 91, 112,
	147, 0, 0, 220, 0, 220, 112, 147, 157, 220,
	112, 112, 112, 91, 165, 166, 168, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 253,
	0, 84, 0, 82, 0, 0, 74, 76, 87, 0,
	77, 115, 116, -2, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 214, 0,
	0, 147, 0, 0, 107, 70, 0, 53, 112, 0,
	0, 0, 0, 176, 161, 0, 0, 0, 157, 197,
	112, 91, 91, 157, 147, 157, 0, 0, 0, 0,
	0, 112, 112, 91, 157, 222, 112, 112, 91, 112,
	91, 91, 157, 167, 169, 170, 171, 172, 174, 258,
	260, 0, 0, 0, 0, 0, 185, 249, 253, 0,
	257, 0, 81, 84, 80, 205, 0, 0, 0, 54,
	0, 119, 0, 0, 0, 257, 206, 0, 208, 211,
	0, 213, 262, 157, 0, 90, 92, 96, 94, 101,
	103, 95, 147, 71, 147, 177, 178, 179, 180, 153,
	0, 0, 155, 156, 146, 148, 150, 196, 91, 157,
	157, 271, 157, 218, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 91, 91, 157, 221,
	112, 91, 91, 157, 91, 157, 157, 267, 0, 192,
	193, 194, 195, 183, 0, 0, 0, 252, 0, 248,
	0, 79, 0, 117, 118, 0, 0, 0, 122, 125,
	204, 273, 207, 212, 105, 0, 108, 109, 110, 0,
	0, 0, 0, 157, 157, 159, 160, 0, 0, 151,
	152, 157, 269, 270, 217, 112, 147, 225, 230, 232,
	226, 0, 228, 229, 0, 0, 0, 112, 91, 157,
	157, 238, 91, 157, 157, 246, 157, 265, 266, 259,
	184, 0, 0, 0, 257, 251, 254, 256, 0, 55,
	120, 121, 41, 0, 106, 93, 97, 0, 102, 105,
	175, 0, 154, 149, 268, 147, 157, 0, 0, 0,
	112, 112, 91, 157, 236, 237, 157, 244, 245, 264,
	0, 186, 187, 247, 0, 0, 0, 98, 0, 42,
	158, 157, 224, 231, 227, 112, 91, 91, 157, 235,
	243, 189, 255, 0, 0, 0, 0, 223, 91, 157,
	157, 242, 188, 190, 89, 104, 99, 0, 157, 240,
	241, 191, 100, 239,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = true
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:151
		{
			setParseTree(yylex, yyDollar[1].stmts)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:157
		{
			yyVAL.stmts = []influxql.Statement{yyDollar[1].stmt}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:161
		{

			if len(yyDollar[1].stmts) == 1 {
				yyVAL.stmts = yyDollar[1].stmts
			} else {
				yylex.Error("excrescent semicolo")
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:170
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:178
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:182
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:186
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:206
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:210
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:214
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:218
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:222
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:226
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:230
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:234
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:238
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:242
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:246
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:250
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:254
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:258
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:262
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:266
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:270
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:274
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:278
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:282
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:286
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:290
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:294
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:298
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:302
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:306
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:310
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:314
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:318
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:326
		{
			stmt := &influxql.SelectStatement{}
			stmt.Fields = yyDollar[2].fields
			stmt.Sources = yyDollar[3].sources
			stmt.Dimensions = yyDollar[5].dimens
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[6].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			influxql.WalkFunc(stmt.Fields, func(n influxql.Node) {
				if _, ok := n.(*influxql.Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[9].location
			yyVAL.stmt = stmt
		}
	case 42:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:354
		{
			stmt := &influxql.SelectStatement{}
			stmt.Hints = yyDollar[2].hints
			stmt.Fields = yyDollar[3].fields
			stmt.Sources = yyDollar[4].sources
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[8].sortfs
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			stmt.SLimit = yyDollar[9].intSlice[2]
			stmt.SOffset = yyDollar[9].intSlice[3]

			tempfill, tempfillvalue, fillflag := deal_Fill(yyDollar[7].inter)
			if fillflag == false {
				yylex.Error("Invalid characters in fill")
			} else {
				stmt.Fill, stmt.FillValue = tempfill, tempfillvalue
			}
			stmt.IsRawQuery = true
			influxql.WalkFunc(stmt.Fields, func(n influxql.Node) {
				if _, ok := n.(*influxql.Call); ok {
					stmt.IsRawQuery = false
				}
			})
			stmt.Location = yyDollar[10].location
			yyVAL.stmt = stmt
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.fields = []*influxql.Field{yyDollar[1].field}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			yyVAL.fields = append([]*influxql.Field{yyDollar[1].field}, yyDollar[3].fields...)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.field = &influxql.Field{Expr: &influxql.Wildcard{Type: influxql.Token(yyDollar[1].int)}}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.field = &influxql.Field{Expr: &influxql.Wildcard{Type: influxql.TAG}}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:405
		{
			yyVAL.field = &influxql.Field{Expr: &influxql.Wildcard{Type: influxql.FIELD}}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.field = &influxql.Field{Expr: yyDollar[1].expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.field = &influxql.Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:417
		{
			yyVAL.field = &influxql.Field{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:427
		{
			c := yyDollar[1].expr.(*influxql.CaseWhenExpr)
			c.Conditions = append(c.Conditions, yyDollar[2].expr.(*influxql.CaseWhenExpr).Conditions...)
			c.Assigners = append(c.Assigners, yyDollar[2].expr.(*influxql.CaseWhenExpr).Assigners...)
			yyVAL.expr = c
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:436
		{
			c := &influxql.CaseWhenExpr{}
			c.Conditions = []influxql.Expr{yyDollar[2].expr}
			c.Assigners = []influxql.Expr{yyDollar[4].expr}
			yyVAL.expr = c
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:445
		{
			yyVAL.fields = []*influxql.Field{&influxql.Field{Expr: &influxql.VarRef{Val: yyDollar[1].str}}}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:449
		{
			yyVAL.fields = append([]*influxql.Field{&influxql.Field{Expr: &influxql.VarRef{Val: yyDollar[1].str}}}, yyDollar[3].fields...)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:455
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.MUL), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:459
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.DIV), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:463
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.ADD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:467
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.SUB), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:471
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.BITWISE_XOR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:475
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.MOD), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.BITWISE_AND), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.BITWISE_OR), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:487
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			cols := &influxql.Call{Name: strings.ToLower(yyDollar[1].str), Args: []influxql.Expr{}}
			for i := range yyDollar[3].fields {
				cols.Args = append(cols.Args, yyDollar[3].fields[i].Expr)
			}
			yyVAL.expr = cols
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			cols := &influxql.Call{Name: strings.ToLower(yyDollar[1].str)}
			yyVAL.expr = cols
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:504
		{
			switch s := yyDollar[2].expr.(type) {
			case *influxql.NumberLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			case *influxql.IntegerLiteral:
				s.Val = -1 * s.Val
				yyVAL.expr = yyDollar[2].expr
			default:
				yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(influxql.MUL), LHS: &influxql.IntegerLiteral{Val: -1}, RHS: yyDollar[2].expr}
			}

		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.expr = &influxql.DurationLiteral{Val: yyDollar[1].tdur}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:526
		{
			c := yyDollar[2].expr.(*influxql.CaseWhenExpr)
			c.Assigners = append(c.Assigners, yyDollar[4].expr)
			yyVAL.expr = c
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:532
		{
			yyVAL.expr = &influxql.VarRef{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:538
		{
			yyVAL.sources = yyDollar[2].sources
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.sources = []influxql.Source{yyDollar[1].ment}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.sources = append([]influxql.Source{yyDollar[1].ment}, yyDollar[3].sources...)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.sources = yyDollar[1].sources

		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:557
		{
			yyVAL.sources = append(yyDollar[1].sources, yyDollar[3].sources...)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:563
		{
			all_subquerys := []influxql.Source{}
			for _, temp_stmt := range yyDollar[2].stmts {

				stmt, ok := temp_stmt.(*influxql.SelectStatement)
				if !ok {
					yylex.Error("expexted SelectStatement")
				}
				build_SubQuery := &influxql.SubQuery{Statement: stmt}
				all_subquerys = append(all_subquerys, build_SubQuery)
			}
			yyVAL.sources = all_subquerys
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:585
		{
			mst := yyDollar[5].ment
			mst.Database = yyDollar[1].str
			mst.RetentionPolicy = yyDollar[3].str
			yyVAL.ment = mst
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:592
		{
			mst := yyDollar[4].ment
			mst.RetentionPolicy = yyDollar[2].str
			yyVAL.ment = mst
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:598
		{
			mst := yyDollar[4].ment
			mst.Database = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:604
		{
			mst := yyDollar[3].ment
			mst.RetentionPolicy = yyDollar[1].str
			yyVAL.ment = mst
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.ment = yyDollar[1].ment
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.ment = &influxql.Measurement{Name: yyDollar[1].str}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:620
		{
			yyVAL.ment = &influxql.Measurement{Name: yyDollar[1].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}

			yyVAL.ment = &influxql.Measurement{Regex: &influxql.RegexLiteral{Val: re}}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:635
		{
			yyVAL.ment = &influxql.Measurement{}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:639
		{
			yyVAL.ment = &influxql.Measurement{}
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:645
		{
			yyVAL.ment = &influxql.Measurement{}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:651
		{
			yyVAL.dimens = yyDollar[3].dimens
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:655
		{
			yyVAL.dimens = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.dimens = []*influxql.Dimension{yyDollar[1].dimen}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:665
		{
			yyVAL.dimens = append([]*influxql.Dimension{yyDollar[1].dimen}, yyDollar[3].dimens...)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.str = yyDollar[1].str
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.str = yyDollar[1].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.VarRef{Val: yyDollar[1].str}}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.VarRef{Val: yyDollar[1].str}}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:689
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.Call{Name: "time", Args: []influxql.Expr{&influxql.DurationLiteral{Val: yyDollar[3].tdur}}}}
		}
	case 99:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:697
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.Call{Name: "time", Args: []influxql.Expr{&influxql.DurationLiteral{Val: yyDollar[3].tdur}, &influxql.DurationLiteral{Val: yyDollar[5].tdur}}}}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:705
		{
			if strings.ToLower(yyDollar[1].str) != "time" {
				yylex.Error("Invalid group by combination for no-time tag and time duration")
			}

			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.Call{Name: "time", Args: []influxql.Expr{&influxql.DurationLiteral{Val: yyDollar[3].tdur}, &influxql.DurationLiteral{Val: time.Duration(-yyDollar[6].tdur)}}}}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.Wildcard{Type: influxql.Token(yyDollar[1].int)}}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:717
		{
			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.Wildcard{Type: influxql.Token(yyDollar[1].int)}}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.dimen = &influxql.Dimension{Expr: &influxql.RegexLiteral{Val: re}}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:732
		{
			if strings.ToLower(yyDollar[1].str) != "tz" {
				yylex.Error("Expect tz")
			}
			loc, err := time.LoadLocation(yyDollar[3].str)
			if err != nil {
				yylex.Error("nable to find time zone")
			}
			yyVAL.location = loc
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:743
		{
			yyVAL.location = nil
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:749
		{
			yyVAL.inter = yyDollar[3].inter
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:753
		{
			yyVAL.inter = "null"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:759
		{
			yyVAL.inter = yyDollar[1].str
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:763
		{
			yyVAL.inter = yyDollar[1].int64
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.inter = yyDollar[1].float64
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:777
		{
			yyVAL.expr = nil
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.expr = &influxql.ParenExpr{Expr: yyDollar[2].expr}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:799
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:803
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:811
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:815
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:819
		{
			yyVAL.expr = &influxql.BinaryExpr{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			if yyDollar[2].int == influxql.NEQREGEX {
				switch yyDollar[3].expr.(type) {
				case *influxql.RegexLiteral:
				default:
					yylex.Error("expected regular expression")
				}
			}
			yyVAL.expr = &influxql.BinaryExpr{Op: influxql.Token(yyDollar[2].int), LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.expr = &influxql.ParenExpr{Expr: yyDollar[2].expr}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.int = influxql.EQ
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.int = influxql.NEQ
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.int = influxql.LT
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.int = influxql.LTE
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.int = influxql.GT
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.int = influxql.GTE
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.int = influxql.EQREGEX
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.int = influxql.NEQREGEX
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.str = yyDollar[1].str
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.expr = &influxql.VarRef{Val: yyDollar[1].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:892
		{
			yyVAL.expr = &influxql.VarRef{Val: yyDollar[1].str, Type: yyDollar[3].dataType}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.expr = &influxql.NumberLiteral{Val: yyDollar[1].float64}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:900
		{
			yyVAL.expr = &influxql.IntegerLiteral{Val: yyDollar[1].int64}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.expr = &influxql.StringLiteral{Val: yyDollar[1].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.expr = &influxql.BooleanLiteral{Val: true}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.expr = &influxql.BooleanLiteral{Val: false}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			re, err := regexp.Compile(yyDollar[1].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.expr = &influxql.RegexLiteral{Val: re}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:926
		{
			switch strings.ToLower(yyDollar[1].str) {
			case "float":
				yyVAL.dataType = influxql.Float
			case "integer":
				yyVAL.dataType = influxql.Integer
			case "string":
				yyVAL.dataType = influxql.String
			case "boolean":
				yyVAL.dataType = influxql.Boolean
			case "time":
				yyVAL.dataType = influxql.Time
			case "duration":
				yyVAL.dataType = influxql.Duration
			case "unsigned":
				yyVAL.dataType = influxql.Unsigned
			default:
				yylex.Error("wrong field dataType")
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.dataType = influxql.Tag
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.dataType = influxql.AnyField
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.sortfs = yyDollar[3].sortfs
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.sortfs = nil
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.sortfs = []*influxql.SortField{yyDollar[1].sortf}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			yyVAL.sortfs = append([]*influxql.SortField{yyDollar[1].sortf}, yyDollar[3].sortfs...)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.sortf = &influxql.SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.sortf = &influxql.SortField{Name: yyDollar[1].str, Ascending: false}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.sortf = &influxql.SortField{Name: yyDollar[1].str, Ascending: true}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.intSlice = append(yyDollar[1].intSlice, yyDollar[2].intSlice...)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:997
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1015
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), int(yyDollar[4].int64)}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.intSlice = []int{int(yyDollar[2].int64), 0}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.intSlice = []int{0, int(yyDollar[2].int64)}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.intSlice = []int{0, 0}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.stmt = &influxql.ShowDatabasesStatement{}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1039
		{
			sms := yyDollar[4].stmt

			sms.(*influxql.CreateDatabaseStatement).Name = yyDollar[3].str
			yyVAL.stmt = sms
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1046
		{
			stmt := &influxql.CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = false
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			stmt := &influxql.CreateDatabaseStatement{}
			stmt.RetentionPolicyCreate = true
			stmt.RetentionPolicyDuration = yyDollar[2].durations.PolicyDuration
			stmt.RetentionPolicyReplication = yyDollar[2].durations.Replication
			stmt.RetentionPolicyName = yyDollar[2].durations.PolicyName
			stmt.ShardKey = yyDollar[2].durations.ShardKey
			sort.Strings(stmt.ShardKey)

			if yyDollar[2].durations.rpdefault == true {
				yylex.Error("no default")
			}

			if yyDollar[2].durations.ShardGroupDuration == -1 || yyDollar[2].durations.ShardGroupDuration == 0 {
				stmt.RetentionPolicyShardGroupDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
			}

			if yyDollar[2].durations.HotDuration == -1 || yyDollar[2].durations.HotDuration == 0 {
				stmt.RetentionPolicyHotDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyHotDuration = yyDollar[2].durations.HotDuration
			}

			if yyDollar[2].durations.WarmDuration == -1 || yyDollar[2].durations.WarmDuration == 0 {
				stmt.RetentionPolicyWarmDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyWarmDuration = yyDollar[2].durations.WarmDuration
			}

			if yyDollar[2].durations.IndexGroupDuration == -1 || yyDollar[2].durations.IndexGroupDuration == 0 {
				stmt.RetentionPolicyIndexGroupDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.RetentionPolicyIndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
			}
			stmt.ReplicaNum = yyDollar[2].durations.ReplicaNum
			yyVAL.stmt = stmt
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if len(yyDollar[1].durations.ShardKey) != 0 && len(yyDollar[2].durations.ShardKey) != 0 {
				yylex.Error("Repeat ShardKey")
			} else if len(yyDollar[2].durations.ShardKey) != 0 {
				yyDollar[1].durations.ShardKey = yyDollar[2].durations.ShardKey
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}

			if yyDollar[1].durations.PolicyDuration == nil || yyDollar[2].durations.PolicyDuration == nil {
				if yyDollar[2].durations.PolicyDuration != nil {
					yyDollar[1].durations.PolicyDuration = yyDollar[2].durations.PolicyDuration
				}
			} else {
				yylex.Error("Repeat Policy Duration")
			}

			if yyDollar[1].durations.Replication == nil || yyDollar[2].durations.Replication == nil {
				if yyDollar[2].durations.Replication != nil {
					yyDollar[1].durations.Replication = yyDollar[2].durations.Replication
				}
			} else {
				yylex.Error("Repeat Policy Replication")
			}

			if len(yyDollar[1].durations.PolicyName) == 0 || len(yyDollar[2].durations.PolicyName) == 0 {
				if len(yyDollar[2].durations.PolicyName) != 0 {
					yyDollar[1].durations.PolicyName = yyDollar[2].durations.PolicyName
				}
			} else {
				yylex.Error("Repeat Policy Name")
			}

			if yyDollar[2].durations.ReplicaNum != 0 {
				yyDollar[1].durations.ReplicaNum = yyDollar[2].durations.ReplicaNum
			}

			if yyDollar[1].durations.rpdefault == false || yyDollar[2].durations.rpdefault == false {
				if yyDollar[2].durations.rpdefault == true {
					yyDollar[1].durations.rpdefault = yyDollar[2].durations.rpdefault
				}
			} else {
				yylex.Error("Repeat rpdefault")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyDuration: &yyDollar[2].tdur}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			if yyDollar[2].int64 < 1 || yyDollar[2].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			int_integer := *(*int)(unsafe.Pointer(&yyDollar[2].int64))
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, Replication: &int_integer}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1198
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, PolicyName: yyDollar[2].str}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, ReplicaNum: uint32(yyDollar[2].int64)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: true}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			if len(yyDollar[2].strSlice) == 0 {
				yylex.Error("ShardKey should not be nil")
			}
			yyVAL.durations = &Durations{ShardKey: yyDollar[2].strSlice, ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1, rpdefault: false}
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1221
		{
			sms := &influxql.ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Source = yyDollar[6].ment
			sms.Condition = yyDollar[7].expr
			sms.SortFields = yyDollar[8].sortfs
			sms.Limit = yyDollar[9].intSlice[0]
			sms.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = sms
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1232
		{
			sms := &influxql.ShowMeasurementsStatement{}
			sms.Database = yyDollar[3].str
			sms.Condition = yyDollar[4].expr
			sms.SortFields = yyDollar[5].sortfs
			sms.Limit = yyDollar[6].intSlice[0]
			sms.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = sms
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.ment = &influxql.Measurement{Name: yyDollar[2].str}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1249
		{
			yyVAL.ment = &influxql.Measurement{Name: yyDollar[2].str}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &influxql.Measurement{Regex: &influxql.RegexLiteral{Val: re}}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			yyVAL.ment = &influxql.Measurement{Regex: &influxql.RegexLiteral{Val: re}}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1273
		{
			yyVAL.stmt = &influxql.ShowRetentionPoliciesStatement{
				Database: yyDollar[5].str,
			}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1279
		{
			yyVAL.stmt = &influxql.ShowRetentionPoliciesStatement{}
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			stmt := yyDollar[7].stmt.(*influxql.CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1293
		{
			stmt := yyDollar[7].stmt.(*influxql.CreateRetentionPolicyStatement)
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Default = true
			yyVAL.stmt = stmt
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1303
		{
			stmt := &influxql.CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 186:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1310
		{
			stmt := &influxql.CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Admin = true
			yyVAL.stmt = stmt
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1318
		{
			stmt := &influxql.CreateUserStatement{}
			stmt.Name = yyDollar[3].str
			stmt.Password = yyDollar[6].str
			stmt.Rwuser = true
			yyVAL.stmt = stmt
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			stmt := &influxql.CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			stmt.Replication = int(yyDollar[4].int64)

			if yyDollar[5].durations.ShardGroupDuration == -1 || yyDollar[5].durations.ShardGroupDuration == 0 {
				stmt.ShardGroupDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.ShardGroupDuration = yyDollar[5].durations.ShardGroupDuration
			}

			if yyDollar[5].durations.HotDuration == -1 || yyDollar[5].durations.HotDuration == 0 {
				stmt.HotDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.HotDuration = yyDollar[5].durations.HotDuration
			}

			if yyDollar[5].durations.WarmDuration == -1 || yyDollar[5].durations.WarmDuration == 0 {
				stmt.WarmDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.WarmDuration = yyDollar[5].durations.WarmDuration
			}

			if yyDollar[5].durations.IndexGroupDuration == -1 || yyDollar[5].durations.IndexGroupDuration == 0 {
				stmt.IndexGroupDuration = time.Duration(query.DefaultQueryTimeout)
			} else {
				stmt.IndexGroupDuration = yyDollar[5].durations.IndexGroupDuration
			}

			yyVAL.stmt = stmt
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1364
		{
			stmt := &influxql.CreateRetentionPolicyStatement{}
			stmt.Duration = yyDollar[2].tdur
			if yyDollar[4].int64 < 1 || yyDollar[4].int64 > 2147483647 {
				yylex.Error("REPLICATION must be 1 <= n <= 2147483647")
			}
			stmt.Replication = int(yyDollar[4].int64)
			yyVAL.stmt = stmt
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.durations = yyDollar[1].durations
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			if yyDollar[1].durations.ShardGroupDuration < 0 || yyDollar[2].durations.ShardGroupDuration < 0 {
				if yyDollar[2].durations.ShardGroupDuration >= 0 {
					yyDollar[1].durations.ShardGroupDuration = yyDollar[2].durations.ShardGroupDuration
				}
			} else {
				yylex.Error("Repeat Shard Group Duration")
			}

			if yyDollar[1].durations.HotDuration < 0 || yyDollar[2].durations.HotDuration < 0 {
				if yyDollar[2].durations.HotDuration >= 0 {
					yyDollar[1].durations.HotDuration = yyDollar[2].durations.HotDuration
				}
			} else {
				yylex.Error("Repeat Hot Duration")
			}

			if yyDollar[1].durations.WarmDuration < 0 || yyDollar[2].durations.WarmDuration < 0 {
				if yyDollar[2].durations.WarmDuration >= 0 {
					yyDollar[1].durations.WarmDuration = yyDollar[2].durations.WarmDuration
				}
			} else {
				yylex.Error("Repeat Warm Duration")
			}

			if yyDollar[1].durations.IndexGroupDuration < 0 || yyDollar[2].durations.IndexGroupDuration < 0 {
				if yyDollar[2].durations.IndexGroupDuration >= 0 {
					yyDollar[1].durations.IndexGroupDuration = yyDollar[2].durations.IndexGroupDuration
				}
			} else {
				yylex.Error("Repeat Index Group Duration")
			}
			yyVAL.durations = yyDollar[1].durations
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.durations = &Durations{ShardGroupDuration: yyDollar[3].tdur, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1423
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: yyDollar[3].tdur, WarmDuration: -1, IndexGroupDuration: -1}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1427
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: yyDollar[3].tdur, IndexGroupDuration: -1}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1431
		{
			yyVAL.durations = &Durations{ShardGroupDuration: -1, HotDuration: -1, WarmDuration: -1, IndexGroupDuration: yyDollar[3].tdur}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1439
		{
			stmt := &influxql.ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Sources = yyDollar[4].sources
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1450
		{
			stmt := &influxql.ShowSeriesStatement{}
			stmt.Database = yyDollar[3].str
			stmt.Condition = yyDollar[4].expr
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1462
		{
			yyVAL.stmt = &influxql.ShowUsersStatement{}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1468
		{
			stmt := &influxql.DropDatabaseStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1476
		{
			stmt := &influxql.DropSeriesStatement{}
			stmt.Sources = yyDollar[3].sources
			stmt.Condition = yyDollar[4].expr
			yyVAL.stmt = stmt
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1483
		{
			stmt := &influxql.DropSeriesStatement{}
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			stmt := &influxql.DeleteSeriesStatement{}
			stmt.Sources = yyDollar[2].sources
			stmt.Condition = yyDollar[3].expr
			yyVAL.stmt = stmt
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			stmt := &influxql.DeleteSeriesStatement{}
			stmt.Condition = yyDollar[2].expr
			yyVAL.stmt = stmt
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1507
		{
			stmt := &influxql.AlterRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			stmt.Duration = yyDollar[7].durations.PolicyDuration
			stmt.Replication = yyDollar[7].durations.Replication
			stmt.Default = yyDollar[7].durations.rpdefault
			if yyDollar[7].durations.ShardGroupDuration == -1 {
				stmt.ShardGroupDuration = nil
			} else {
				stmt.ShardGroupDuration = &yyDollar[7].durations.ShardGroupDuration
			}
			if yyDollar[7].durations.HotDuration == -1 {
				stmt.HotDuration = nil
			} else {
				stmt.HotDuration = &yyDollar[7].durations.HotDuration
			}
			if yyDollar[7].durations.WarmDuration == -1 {
				stmt.WarmDuration = nil
			} else {
				stmt.WarmDuration = &yyDollar[7].durations.WarmDuration
			}
			if yyDollar[7].durations.IndexGroupDuration == -1 {
				stmt.IndexGroupDuration = nil
			} else {
				stmt.IndexGroupDuration = &yyDollar[7].durations.IndexGroupDuration
			}

			if len(yyDollar[7].durations.PolicyName) > 0 || yyDollar[7].durations.ReplicaNum != 0 {
				yylex.Error("PolicyName and ReplicaNum")
			}
			yyVAL.stmt = stmt

		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1546
		{
			stmt := &influxql.DropRetentionPolicyStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Database = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1555
		{
			stmt := &influxql.GrantStatement{}
			stmt.Privilege = influxql.AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1563
		{
			stmt := &influxql.GrantStatement{}
			stmt.Privilege = influxql.AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1571
		{
			stmt := &influxql.GrantStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = influxql.ReadPrivilege
			case "write":
				stmt.Privilege = influxql.WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1588
		{
			yyVAL.stmt = &influxql.GrantAdminStatement{User: yyDollar[5].str}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			yyVAL.stmt = &influxql.GrantAdminStatement{User: yyDollar[4].str}
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1598
		{
			stmt := &influxql.RevokeStatement{}
			stmt.Privilege = influxql.AllPrivileges
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1606
		{
			stmt := &influxql.RevokeStatement{}
			stmt.Privilege = influxql.AllPrivileges
			stmt.On = yyDollar[5].str
			stmt.User = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1614
		{
			stmt := &influxql.RevokeStatement{}
			switch strings.ToLower(yyDollar[2].str) {
			case "read":
				stmt.Privilege = influxql.ReadPrivilege
			case "write":
				stmt.Privilege = influxql.WritePrivilege
			default:
				yylex.Error("wrong Privilege")
			}
			stmt.On = yyDollar[4].str
			stmt.User = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1631
		{
			yyVAL.stmt = &influxql.RevokeAdminStatement{User: yyDollar[5].str}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1635
		{
			yyVAL.stmt = &influxql.RevokeAdminStatement{User: yyDollar[4].str}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1641
		{
			yyVAL.stmt = &influxql.DropUserStatement{Name: yyDollar[3].str}
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1647
		{
			stmt := &influxql.ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.SortFields = yyDollar[7].sortfs
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			stmt.SLimit = yyDollar[8].intSlice[2]
			stmt.SOffset = yyDollar[8].intSlice[3]
			yyVAL.stmt = stmt

		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1661
		{
			stmt := &influxql.ShowTagKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[5].expr
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			stmt.SLimit = yyDollar[7].intSlice[2]
			stmt.SOffset = yyDollar[7].intSlice[3]
			yyVAL.stmt = stmt
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = yyDollar[2].str
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1685
		{
			stmt := &influxql.ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.SortFields = yyDollar[6].sortfs
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1695
		{
			stmt := &influxql.ShowFieldKeysStatement{}
			stmt.Database = yyDollar[4].str
			stmt.SortFields = yyDollar[5].sortfs
			stmt.Limit = yyDollar[6].intSlice[0]
			stmt.Offset = yyDollar[6].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1707
		{
			stmt := yyDollar[8].stmt.(*influxql.ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[9].expr
			stmt.SortFields = yyDollar[10].sortfs
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			yyVAL.stmt = stmt

		}
	case 224:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1720
		{
			stmt := yyDollar[7].stmt.(*influxql.ShowTagValuesStatement)
			stmt.TagKeyCondition = nil
			stmt.Database = yyDollar[4].str
			stmt.Condition = yyDollar[8].expr
			stmt.SortFields = yyDollar[9].sortfs
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			stmt := &influxql.ShowTagValuesStatement{}
			stmt.Op = influxql.EQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*influxql.ListLiteral)
			yyVAL.stmt = stmt
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			stmt := &influxql.ShowTagValuesStatement{}
			stmt.Op = influxql.NEQ
			stmt.TagKeyExpr = yyDollar[2].expr.(*influxql.ListLiteral)
			yyVAL.stmt = stmt
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1747
		{
			stmt := &influxql.ShowTagValuesStatement{}
			stmt.Op = influxql.IN
			stmt.TagKeyExpr = yyDollar[3].expr.(*influxql.ListLiteral)
			yyVAL.stmt = stmt
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			stmt := &influxql.ShowTagValuesStatement{}
			stmt.Op = influxql.EQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &influxql.RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			stmt := &influxql.ShowTagValuesStatement{}
			stmt.Op = influxql.NEQREGEX
			re, err := regexp.Compile(yyDollar[2].str)
			if err != nil {
				yylex.Error("Invalid regexprs")
			}
			stmt.TagKeyExpr = &influxql.RegexLiteral{Val: re}
			yyVAL.stmt = stmt
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			temp := []string{yyDollar[1].str}
			yyVAL.expr = &influxql.ListLiteral{Vals: temp}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1784
		{
			yyDollar[3].expr.(*influxql.ListLiteral).Vals = append(yyDollar[3].expr.(*influxql.ListLiteral).Vals, yyDollar[1].str)
			yyVAL.expr = yyDollar[3].expr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = yyDollar[1].str
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1799
		{
			stmt := &influxql.ExplainStatement{}
			stmt.Statement = yyDollar[3].stmt.(*influxql.SelectStatement)
			stmt.Analyze = true
			yyVAL.stmt = stmt
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			stmt := &influxql.ExplainStatement{}
			stmt.Statement = yyDollar[2].stmt.(*influxql.SelectStatement)
			stmt.Analyze = false
			yyVAL.stmt = stmt
		}
	case 235:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1816
		{
			stmt := &influxql.ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1828
		{
			stmt := &influxql.ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 237:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1839
		{
			stmt := &influxql.ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 238:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1851
		{
			stmt := &influxql.ShowTagKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 239:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:1867
		{
			stmt := &influxql.ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt_temp := yyDollar[10].stmt.(*influxql.ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[11].expr
			stmt.Dimensions = yyDollar[12].dimens
			stmt.Limit = yyDollar[13].intSlice[0]
			stmt.Offset = yyDollar[13].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 240:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1884
		{
			stmt := &influxql.ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt_temp := yyDollar[9].stmt.(*influxql.ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 241:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1899
		{
			stmt := &influxql.ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt_temp := yyDollar[9].stmt.(*influxql.ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[10].expr
			stmt.Dimensions = yyDollar[11].dimens
			stmt.Limit = yyDollar[12].intSlice[0]
			stmt.Offset = yyDollar[12].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt

		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1916
		{
			stmt := &influxql.ShowTagValuesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt_temp := yyDollar[8].stmt.(*influxql.ShowTagValuesStatement)
			stmt.Op = stmt_temp.Op
			stmt.TagKeyExpr = stmt_temp.TagKeyExpr
			stmt.Condition = yyDollar[9].expr
			stmt.Dimensions = yyDollar[10].dimens
			stmt.Limit = yyDollar[11].intSlice[0]
			stmt.Offset = yyDollar[11].intSlice[1]
			stmt.TagKeyCondition = nil
			yyVAL.stmt = stmt
		}
	case 243:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1934
		{
			stmt := &influxql.ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Sources = yyDollar[7].sources
			stmt.Condition = yyDollar[8].expr
			stmt.Dimensions = yyDollar[9].dimens
			stmt.Limit = yyDollar[10].intSlice[0]
			stmt.Offset = yyDollar[10].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 244:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1946
		{
			stmt := &influxql.ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[6].str
			stmt.Exact = true
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1957
		{
			stmt := &influxql.ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = false
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1969
		{
			stmt := &influxql.ShowFieldKeyCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1983
		{
			stmt := &influxql.CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[6].indexType != nil {
				stmt.IndexType = yyDollar[6].indexType.types
				stmt.IndexList = yyDollar[6].indexType.lists
			}
			stmt.ShardKey = yyDollar[8].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[9].str
			yyVAL.stmt = stmt
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1998
		{
			stmt := &influxql.CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2009
		{
			stmt := &influxql.CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			if yyDollar[6].indexType != nil {
				stmt.IndexType = yyDollar[6].indexType.types
				stmt.IndexList = yyDollar[6].indexType.lists
			}
			yyVAL.stmt = stmt
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			stmt := &influxql.CreateMeasurementStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.indexType = &IndexType{
				types: []string{yyDollar[1].str},
				lists: [][]string{yyDollar[3].strSlice},
			}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			indextype := yyDollar[1].indexType
			if yyDollar[2].indexType != nil {
				indextype.types = append(indextype.types, yyDollar[2].indexType.types...)
				indextype.lists = append(indextype.lists, yyDollar[2].indexType.lists...)
			}
			yyVAL.indexType = indextype
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			yyVAL.indexType = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2060
		{

			yyVAL.strSlice = append([]string{yyDollar[1].str}, yyDollar[3].strSlice...)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = yyDollar[2].str
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = "hash"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.strSlice = []string{yyDollar[1].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.strSlice = append(yyDollar[1].strSlice, yyDollar[3].str)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = yyDollar[1].str
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			stmt := &influxql.DropShardStatement{}
			stmt.ID = uint64(yyDollar[3].int64)
			yyVAL.stmt = stmt
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2100
		{
			stmt := &influxql.SetPasswordUserStatement{}
			stmt.Name = yyDollar[4].str
			stmt.Password = yyDollar[6].str
			yyVAL.stmt = stmt
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2111
		{
			stmt := &influxql.ShowGrantsForUserStatement{}
			stmt.Name = yyDollar[4].str
			yyVAL.stmt = stmt
		}
	case 264:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2119
		{
			stmt := &influxql.ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2131
		{
			stmt := &influxql.ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2142
		{
			stmt := &influxql.ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2154
		{
			stmt := &influxql.ShowMeasurementCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 268:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2168
		{
			stmt := &influxql.ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Sources = yyDollar[6].sources
			stmt.Condition = yyDollar[7].expr
			stmt.Dimensions = yyDollar[8].dimens
			stmt.Limit = yyDollar[9].intSlice[0]
			stmt.Offset = yyDollar[9].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 269:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2180
		{
			stmt := &influxql.ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[5].str
			stmt.Exact = true
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2191
		{
			stmt := &influxql.ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Sources = yyDollar[5].sources
			stmt.Condition = yyDollar[6].expr
			stmt.Dimensions = yyDollar[7].dimens
			stmt.Limit = yyDollar[8].intSlice[0]
			stmt.Offset = yyDollar[8].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2203
		{
			stmt := &influxql.ShowSeriesCardinalityStatement{}
			stmt.Database = yyDollar[4].str
			stmt.Exact = false
			stmt.Condition = yyDollar[5].expr
			stmt.Dimensions = yyDollar[6].dimens
			stmt.Limit = yyDollar[7].intSlice[0]
			stmt.Offset = yyDollar[7].intSlice[1]
			yyVAL.stmt = stmt
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			stmt := &influxql.ShowShardsStatement{}
			yyVAL.stmt = stmt
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2225
		{
			stmt := &influxql.AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.ShardKey = yyDollar[6].strSlice
			sort.Strings(stmt.ShardKey)
			stmt.Type = yyDollar[7].str
			yyVAL.stmt = stmt
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			stmt := &influxql.AlterShardKeyStatement{}
			stmt.Database = yyDollar[3].ment.Database
			stmt.Name = yyDollar[3].ment.Name
			stmt.RetentionPolicy = yyDollar[3].ment.RetentionPolicy
			stmt.Type = "hash"
			yyVAL.stmt = stmt
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			stmt := &influxql.ShowShardGroupsStatement{}
			yyVAL.stmt = stmt
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			stmt := &influxql.DropMeasurementStatement{}
			stmt.Name = yyDollar[3].str
			yyVAL.stmt = stmt
		}
	}
	goto yystack /* stack new state and value */
}
