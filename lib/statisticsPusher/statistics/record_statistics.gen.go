// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: statistics.tmpl

/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package statistics

import (
	"sync"
	"sync/atomic"
)

type RecordStatistics struct {
	itemIntervalRecordPoolInUse    int64
	itemIntervalRecordPoolGet      int64
	itemIntervalRecordPoolGetReUse int64
	itemIntervalRecordPoolAbort    int64
	itemFileCursorPoolInUse        int64
	itemFileCursorPoolGet          int64
	itemFileCursorPoolGetReUse     int64
	itemFileCursorPoolAbort        int64
	itemAggPoolInUse               int64
	itemAggPoolGet                 int64
	itemAggPoolGetReUse            int64
	itemAggPoolAbort               int64
	itemTsmMergePoolInUse          int64
	itemTsmMergePoolGet            int64
	itemTsmMergePoolGetReUse       int64
	itemTsmMergePoolAbort          int64
	itemTsspSequencePoolInUse      int64
	itemTsspSequencePoolGet        int64
	itemTsspSequencePoolGetReUse   int64
	itemTsspSequencePoolAbort      int64
	itemSequenceAggPoolInUse       int64
	itemSequenceAggPoolGet         int64
	itemSequenceAggPoolGetReUse    int64
	itemSequenceAggPoolAbort       int64
	itemCircularRecordPool         int64
	itemSeriesPoolInUse            int64
	itemSeriesPoolGet              int64
	itemSeriesPoolAbort            int64
	itemSeriesPoolGetReUse         int64

	mu  sync.RWMutex
	buf []byte

	tags map[string]string
}

var instanceRecordStatistics = &RecordStatistics{}

func NewRecordStatistics() *RecordStatistics {
	return instanceRecordStatistics
}

func (s *RecordStatistics) Init(tags map[string]string) {
	s.tags = make(map[string]string)
	for k, v := range tags {
		s.tags[k] = v
	}
}

func (s *RecordStatistics) Collect(buffer []byte) ([]byte, error) {
	data := map[string]interface{}{
		"IntervalRecordPoolInUse":    s.itemIntervalRecordPoolInUse,
		"IntervalRecordPoolGet":      s.itemIntervalRecordPoolGet,
		"IntervalRecordPoolGetReUse": s.itemIntervalRecordPoolGetReUse,
		"IntervalRecordPoolAbort":    s.itemIntervalRecordPoolAbort,
		"FileCursorPoolInUse":        s.itemFileCursorPoolInUse,
		"FileCursorPoolGet":          s.itemFileCursorPoolGet,
		"FileCursorPoolGetReUse":     s.itemFileCursorPoolGetReUse,
		"FileCursorPoolAbort":        s.itemFileCursorPoolAbort,
		"AggPoolInUse":               s.itemAggPoolInUse,
		"AggPoolGet":                 s.itemAggPoolGet,
		"AggPoolGetReUse":            s.itemAggPoolGetReUse,
		"AggPoolAbort":               s.itemAggPoolAbort,
		"TsmMergePoolInUse":          s.itemTsmMergePoolInUse,
		"TsmMergePoolGet":            s.itemTsmMergePoolGet,
		"TsmMergePoolGetReUse":       s.itemTsmMergePoolGetReUse,
		"TsmMergePoolAbort":          s.itemTsmMergePoolAbort,
		"TsspSequencePoolInUse":      s.itemTsspSequencePoolInUse,
		"TsspSequencePoolGet":        s.itemTsspSequencePoolGet,
		"TsspSequencePoolGetReUse":   s.itemTsspSequencePoolGetReUse,
		"TsspSequencePoolAbort":      s.itemTsspSequencePoolAbort,
		"SequenceAggPoolInUse":       s.itemSequenceAggPoolInUse,
		"SequenceAggPoolGet":         s.itemSequenceAggPoolGet,
		"SequenceAggPoolGetReUse":    s.itemSequenceAggPoolGetReUse,
		"SequenceAggPoolAbort":       s.itemSequenceAggPoolAbort,
		"CircularRecordPool":         s.itemCircularRecordPool,
		"SeriesPoolInUse":            s.itemSeriesPoolInUse,
		"SeriesPoolGet":              s.itemSeriesPoolGet,
		"SeriesPoolAbort":            s.itemSeriesPoolAbort,
		"SeriesPoolGetReUse":         s.itemSeriesPoolGetReUse,
	}

	buffer = AddPointToBuffer("record", s.tags, data, buffer)
	if len(s.buf) > 0 {
		s.mu.Lock()
		buffer = append(buffer, s.buf...)
		s.buf = s.buf[:0]
		s.mu.Unlock()
	}

	return buffer, nil
}

func (s *RecordStatistics) AddIntervalRecordPoolInUse(i int64) {
	atomic.AddInt64(&s.itemIntervalRecordPoolInUse, i)
}

func (s *RecordStatistics) AddIntervalRecordPoolGet(i int64) {
	atomic.AddInt64(&s.itemIntervalRecordPoolGet, i)
}

func (s *RecordStatistics) AddIntervalRecordPoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemIntervalRecordPoolGetReUse, i)
}

func (s *RecordStatistics) AddIntervalRecordPoolAbort(i int64) {
	atomic.AddInt64(&s.itemIntervalRecordPoolAbort, i)
}

func (s *RecordStatistics) AddFileCursorPoolInUse(i int64) {
	atomic.AddInt64(&s.itemFileCursorPoolInUse, i)
}

func (s *RecordStatistics) AddFileCursorPoolGet(i int64) {
	atomic.AddInt64(&s.itemFileCursorPoolGet, i)
}

func (s *RecordStatistics) AddFileCursorPoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemFileCursorPoolGetReUse, i)
}

func (s *RecordStatistics) AddFileCursorPoolAbort(i int64) {
	atomic.AddInt64(&s.itemFileCursorPoolAbort, i)
}

func (s *RecordStatistics) AddAggPoolInUse(i int64) {
	atomic.AddInt64(&s.itemAggPoolInUse, i)
}

func (s *RecordStatistics) AddAggPoolGet(i int64) {
	atomic.AddInt64(&s.itemAggPoolGet, i)
}

func (s *RecordStatistics) AddAggPoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemAggPoolGetReUse, i)
}

func (s *RecordStatistics) AddAggPoolAbort(i int64) {
	atomic.AddInt64(&s.itemAggPoolAbort, i)
}

func (s *RecordStatistics) AddTsmMergePoolInUse(i int64) {
	atomic.AddInt64(&s.itemTsmMergePoolInUse, i)
}

func (s *RecordStatistics) AddTsmMergePoolGet(i int64) {
	atomic.AddInt64(&s.itemTsmMergePoolGet, i)
}

func (s *RecordStatistics) AddTsmMergePoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemTsmMergePoolGetReUse, i)
}

func (s *RecordStatistics) AddTsmMergePoolAbort(i int64) {
	atomic.AddInt64(&s.itemTsmMergePoolAbort, i)
}

func (s *RecordStatistics) AddTsspSequencePoolInUse(i int64) {
	atomic.AddInt64(&s.itemTsspSequencePoolInUse, i)
}

func (s *RecordStatistics) AddTsspSequencePoolGet(i int64) {
	atomic.AddInt64(&s.itemTsspSequencePoolGet, i)
}

func (s *RecordStatistics) AddTsspSequencePoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemTsspSequencePoolGetReUse, i)
}

func (s *RecordStatistics) AddTsspSequencePoolAbort(i int64) {
	atomic.AddInt64(&s.itemTsspSequencePoolAbort, i)
}

func (s *RecordStatistics) AddSequenceAggPoolInUse(i int64) {
	atomic.AddInt64(&s.itemSequenceAggPoolInUse, i)
}

func (s *RecordStatistics) AddSequenceAggPoolGet(i int64) {
	atomic.AddInt64(&s.itemSequenceAggPoolGet, i)
}

func (s *RecordStatistics) AddSequenceAggPoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemSequenceAggPoolGetReUse, i)
}

func (s *RecordStatistics) AddSequenceAggPoolAbort(i int64) {
	atomic.AddInt64(&s.itemSequenceAggPoolAbort, i)
}

func (s *RecordStatistics) AddCircularRecordPool(i int64) {
	atomic.AddInt64(&s.itemCircularRecordPool, i)
}

func (s *RecordStatistics) AddSeriesPoolInUse(i int64) {
	atomic.AddInt64(&s.itemSeriesPoolInUse, i)
}

func (s *RecordStatistics) AddSeriesPoolGet(i int64) {
	atomic.AddInt64(&s.itemSeriesPoolGet, i)
}

func (s *RecordStatistics) AddSeriesPoolAbort(i int64) {
	atomic.AddInt64(&s.itemSeriesPoolAbort, i)
}

func (s *RecordStatistics) AddSeriesPoolGetReUse(i int64) {
	atomic.AddInt64(&s.itemSeriesPoolGetReUse, i)
}
