// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: statistics.tmpl

/*
Copyright 2023 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package statistics

import (
	"sync/atomic"

	"github.com/openGemini/openGemini/lib/statisticsPusher/statistics/opsStat"
)

type HitRatioStatistics struct {
	itemIndexWriterGetTotal int64
	itemIndexWriterHitTotal int64
	itemMergeColValGetTotal int64
	itemMergeColValHitTotal int64
	itemFileOpenTotal       int64
	itemQueryFileUnHitTotal int64
	itemChunkMetaGetTotal   int64
	itemChunkMetaHitTotal   int64

	tags map[string]string
}

var instanceHitRatioStatistics = &HitRatioStatistics{}

func NewHitRatioStatistics() *HitRatioStatistics {
	return instanceHitRatioStatistics
}

func (s *HitRatioStatistics) Init(tags map[string]string) {
	s.tags = make(map[string]string)
	for k, v := range tags {
		s.tags[k] = v
	}
}

func (s *HitRatioStatistics) Collect(buffer []byte) ([]byte, error) {
	data := map[string]interface{}{
		"IndexWriterGetTotal": s.itemIndexWriterGetTotal,
		"IndexWriterHitTotal": s.itemIndexWriterHitTotal,
		"MergeColValGetTotal": s.itemMergeColValGetTotal,
		"MergeColValHitTotal": s.itemMergeColValHitTotal,
		"FileOpenTotal":       s.itemFileOpenTotal,
		"QueryFileUnHitTotal": s.itemQueryFileUnHitTotal,
		"ChunkMetaGetTotal":   s.itemChunkMetaGetTotal,
		"ChunkMetaHitTotal":   s.itemChunkMetaHitTotal,
	}

	buffer = AddPointToBuffer("hitRatio", s.tags, data, buffer)

	return buffer, nil
}

func (s *HitRatioStatistics) CollectOps() []opsStat.OpsStatistic {
	data := map[string]interface{}{
		"IndexWriterGetTotal": s.itemIndexWriterGetTotal,
		"IndexWriterHitTotal": s.itemIndexWriterHitTotal,
		"MergeColValGetTotal": s.itemMergeColValGetTotal,
		"MergeColValHitTotal": s.itemMergeColValHitTotal,
		"FileOpenTotal":       s.itemFileOpenTotal,
		"QueryFileUnHitTotal": s.itemQueryFileUnHitTotal,
		"ChunkMetaGetTotal":   s.itemChunkMetaGetTotal,
		"ChunkMetaHitTotal":   s.itemChunkMetaHitTotal,
	}

	return []opsStat.OpsStatistic{
		{
			Name:   "hitRatio",
			Tags:   s.tags,
			Values: data,
		},
	}
}

func (s *HitRatioStatistics) AddIndexWriterGetTotal(i int64) {
	atomic.AddInt64(&s.itemIndexWriterGetTotal, i)
}

func (s *HitRatioStatistics) AddIndexWriterHitTotal(i int64) {
	atomic.AddInt64(&s.itemIndexWriterHitTotal, i)
}

func (s *HitRatioStatistics) AddMergeColValGetTotal(i int64) {
	atomic.AddInt64(&s.itemMergeColValGetTotal, i)
}

func (s *HitRatioStatistics) AddMergeColValHitTotal(i int64) {
	atomic.AddInt64(&s.itemMergeColValHitTotal, i)
}

func (s *HitRatioStatistics) AddFileOpenTotal(i int64) {
	atomic.AddInt64(&s.itemFileOpenTotal, i)
}

func (s *HitRatioStatistics) AddQueryFileUnHitTotal(i int64) {
	atomic.AddInt64(&s.itemQueryFileUnHitTotal, i)
}

func (s *HitRatioStatistics) AddChunkMetaGetTotal(i int64) {
	atomic.AddInt64(&s.itemChunkMetaGetTotal, i)
}

func (s *HitRatioStatistics) AddChunkMetaHitTotal(i int64) {
	atomic.AddInt64(&s.itemChunkMetaHitTotal, i)
}
