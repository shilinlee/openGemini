/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package binaryfilterfunc

import (
    "bytes"

    "github.com/openGemini/openGemini/lib/bitmap"
    "github.com/openGemini/openGemini/lib/record"
    "github.com/openGemini/openGemini/lib/util"
)


{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
	if col.NilCount == 0 {
		return Get{{.Name}}LTConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
	}
	return Get{{.Name}}LTConditionBitMapWithNull(col, compare, bitMap, pos, offset)
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[idx] >= cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) >= 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
     }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) >= 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[index] >= cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) >= 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        index++
        {{- end}}
        }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) >= 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTEConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
	if col.NilCount == 0 {
		return Get{{.Name}}LTEConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
	}
	return Get{{.Name}}LTEConditionBitMapWithNull(col, compare, bitMap, pos, offset)
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTEConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[idx] > cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) > 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) > 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}LTEConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[index] > cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) > 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        index++
        {{- end}}
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) > 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
	if col.NilCount == 0 {
		return Get{{.Name}}GTConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
	}
	return Get{{.Name}}GTConditionBitMapWithNull(col, compare, bitMap, pos, offset)
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[idx] <= cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) <= 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) <= 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[index] <= cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) <= 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        index++
        {{- end}}
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) <= 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTEConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
 	if col.NilCount == 0 {
 		return Get{{.Name}}GTEConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
 	}
 	return Get{{.Name}}GTEConditionBitMapWithNull(col, compare, bitMap, pos, offset)
 }
{{- end}}
{{end}}

{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTEConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[idx] < cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) < 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) < 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}


{{range .}}
{{- if or (eq .Name "Float") (eq .Name "String") (eq .Name "Integer")}}
func Get{{.Name}}GTEConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        if values[index] < cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Compare(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) < 0 {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Integer")}}
        index++
        {{- end}}
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || bytes.Compare(col.Val[col.Offset[col.Len-1]:], cmpData) < 0 {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{- end}}
{{end}}

{{range .}}
func Get{{.Name}}EQConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
 	if col.NilCount == 0 {
 		return Get{{.Name}}EQConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
 	}
 	return Get{{.Name}}EQConditionBitMapWithNull(col, compare, bitMap, pos, offset)
 }
{{end}}

{{range .}}
func Get{{.Name}}EQConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        if values[idx] != cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if !bytes.Equal(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if !bytes.Equal(col.Val[col.Offset[col.Len-1]:], cmpData) {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{end}}

{{range .}}
func Get{{.Name}}EQConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        if values[index] != cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if !bytes.Equal(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        index++
        {{- end}}
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || !bytes.Equal(col.Val[col.Offset[col.Len-1]:], cmpData) {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{end}}

{{range .}}
func Get{{.Name}}NEQConditionBitMap(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
 	if col.NilCount == 0 {
 		return Get{{.Name}}NEQConditionBitMapWithoutNull(col, compare, bitMap, pos, offset)
 	}
 	return Get{{.Name}}NEQConditionBitMapWithNull(col, compare, bitMap, pos, offset)
 }
{{end}}

{{range .}}
func Get{{.Name}}NEQConditionBitMapWithoutNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        if values[idx] == cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Equal(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bytes.Equal(col.Val[col.Offset[col.Len-1]:], cmpData) {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{end}}

{{range .}}
func Get{{.Name}}NEQConditionBitMapWithNull(col *record.ColVal, compare interface{}, bitMap, pos []byte, offset int) []byte {
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    values := col.{{.Name}}Values()
    {{- end}}
    var idx int
    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    var index int
    cmpData, _ := compare.({{.Type}})
    {{- end}}
    {{- if or (eq .Name "String")}}
    cmpData := util.Str2bytes(compare.(string))
    {{- end}}

    {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
    for i := 0; i < col.Len; i++ {
    {{- end}}
    {{- if or (eq .Name "String")}}
    for i := 0; i < col.Len-1; i++ {
    {{- end}}
        idx = offset + i
        if bitmap.IsNil(pos, idx) {
            {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
            if !bitmap.IsNil(bitMap, idx) {
                index++
            }
            {{- end}}
            continue
        }

        if bitmap.IsNil(bitMap, idx) {
            bitmap.SetBitMap(pos, idx)
            continue
        }

        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        if values[index] == cmpData {
        {{- end}}
        {{- if or (eq .Name "String")}}
        if bytes.Equal(col.Val[col.Offset[i]:col.Offset[i+1]], cmpData) {
        {{- end}}
            bitmap.SetBitMap(pos, idx)
        }
        {{- if or (eq .Name "Float") (eq .Name "Boolean") (eq .Name "Integer")}}
        index++
        {{- end}}
    }
    {{- if or (eq .Name "String")}}
    idx = offset + col.Len - 1
    if bitmap.IsNil(pos, idx) {
        return pos
    }
    if bitmap.IsNil(bitMap, idx) || bytes.Equal(col.Val[col.Offset[col.Len-1]:], cmpData) {
        bitmap.SetBitMap(pos, idx)
    }
    {{- end}}
    return pos
}
{{end}}