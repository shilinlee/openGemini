/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: handlers.gen.go.tmpl

package meta

import (
	"github.com/openGemini/openGemini/app/ts-meta/meta/message"
	"github.com/openGemini/openGemini/engine/executor"
	"github.com/openGemini/openGemini/engine/executor/spdy/transport"
)

func New(typ uint8) RPCHandler {
	switch typ {
	case message.PingRequestMessage:
		return &Ping{}
	case message.PeersRequestMessage:
		return &Peers{}
	case message.CreateNodeRequestMessage:
		return &CreateNode{}
	case message.SnapshotRequestMessage:
		return &Snapshot{}
	case message.ExecuteRequestMessage:
		return &Execute{}
	case message.UpdateRequestMessage:
		return &Update{}
	case message.ReportRequestMessage:
		return &Report{}
	case message.GetShardInfoRequestMessage:
		return &GetShardInfo{}
	default:
		return nil
	}
}

type Ping struct {
	BaseHandler

	req *message.PingRequest
}

func (h *Ping) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.PingRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.PingRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Ping) Instance() RPCHandler {
	return &Ping{}
}

type Peers struct {
	BaseHandler

	req *message.PeersRequest
}

func (h *Peers) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.PeersRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.PeersRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Peers) Instance() RPCHandler {
	return &Peers{}
}

type CreateNode struct {
	BaseHandler

	req *message.CreateNodeRequest
}

func (h *CreateNode) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.CreateNodeRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.CreateNodeRequest", data)
	}
	h.req = msg
	return nil
}

func (h *CreateNode) Instance() RPCHandler {
	return &CreateNode{}
}

type Snapshot struct {
	BaseHandler

	req *message.SnapshotRequest
}

func (h *Snapshot) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.SnapshotRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.SnapshotRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Snapshot) Instance() RPCHandler {
	return &Snapshot{}
}

type Execute struct {
	BaseHandler

	req *message.ExecuteRequest
}

func (h *Execute) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.ExecuteRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.ExecuteRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Execute) Instance() RPCHandler {
	return &Execute{}
}

type Update struct {
	BaseHandler

	req *message.UpdateRequest
}

func (h *Update) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.UpdateRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.UpdateRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Update) Instance() RPCHandler {
	return &Update{}
}

type Report struct {
	BaseHandler

	req *message.ReportRequest
}

func (h *Report) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.ReportRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.ReportRequest", data)
	}
	h.req = msg
	return nil
}

func (h *Report) Instance() RPCHandler {
	return &Report{}
}

type GetShardInfo struct {
	BaseHandler

	req *message.GetShardInfoRequest
}

func (h *GetShardInfo) SetRequestMsg(data transport.Codec) error {
	msg, ok := data.(*message.GetShardInfoRequest)
	if !ok {
		return executor.NewInvalidTypeError("*message.GetShardInfoRequest", data)
	}
	h.req = msg
	return nil
}

func (h *GetShardInfo) Instance() RPCHandler {
	return &GetShardInfo{}
}
