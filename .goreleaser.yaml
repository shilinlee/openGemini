# Make sure to check the documentation at https://goreleaser.com
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

env:
  - OWNER=openGemini

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy

builds:
#  - id: "ts-cli"
#    binary: usr/bin/ts-cli
#    main: ./app/ts-cli
#    goos:
#      - linux
#      - darwin
#      - windows
#    goarch:
#      - amd64
#      - arm64
#    ignore:
#      - goos: windows
#        goarch: arm64
#    ldflags:
#      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
#    env:
#      - CGO_ENABLED=0
#  - id: "ts-meta"
#    binary: usr/bin/ts-meta
#    main: ./app/ts-meta
#    goos:
#      - linux
#      - darwin
#      - windows
#    goarch:
#      - amd64
#      - arm64
#    ignore:
#      - goos: windows
#        goarch: arm64
#    ldflags:
#      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
#    env:
#      - CGO_ENABLED=0
#  - id: "ts-monitor"
#    binary: usr/bin/ts-monitor
#    main: ./app/ts-monitor
#    goos:
#      - linux
#      - darwin
#      - windows
#    goarch:
#      - amd64
#      - arm64
#    ignore:
#      - goos: windows
#        goarch: arm64
#    ldflags:
#      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
#    env:
#      - CGO_ENABLED=0
  - id: "ts-server"
    binary: usr/bin/ts-server
    main: ./app/ts-server
    goos:
      - linux
#      - darwin
#      - windows
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: windows
        goarch: arm64
    ldflags:
      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
    env:
      - CGO_ENABLED=0
#  - id: "ts-sql"
#    binary: usr/bin/ts-sql
#    main: ./app/ts-sql
#    goos:
#      - linux
#      - darwin
#      - windows
#    goarch:
#      - amd64
#      - arm64
#    ignore:
#      - goos: windows
#        goarch: arm64
#    ldflags:
#      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
#    env:
#      - CGO_ENABLED=0
#  - id: "ts-store"
#    binary: usr/bin/ts-store
#    main: ./app/ts-store
#    goos:
#      - linux
#      - darwin
#      - windows
#    goarch:
#      - amd64
#      - arm64
#    ignore:
#      - goos: windows
#        goarch: arm64
#    ldflags:
#      - -s -w -X main.TsVersion={{.Tag}} -X main.TsBranch={{.Branch}} -X main.TsCommit={{.FullCommit}} -X main.TsBuildTime={{.Date}}
#    env:
#      - CGO_ENABLED=0
archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}-
      {{- .Version }}-
      {{- .Os }}-
      {{- if eq .Arch "amd64" }}amd64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip
    files:
      - src: "config/*"
        dst: etc
checksum:
  name_template: "checksums.txt"
changelog:
  use: github
  sort: asc
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      # - "^revert:"
      - "^chore:"
      - "^ci:"

release:
  github:
  prerelease: auto

dockers:
#  - id: opengemini-k8s
#    ids:
#      - ts-meta
#      - ts-sql
#      - ts-store
#    image_templates:
##      - "{{ tolower .Env.OWNER }}db/opengemini-k8s:latest"
##      - "{{ tolower .Env.OWNER }}db/opengemini-k8s:{{ .Tag }}"
#      - "ghcr.io/shilinlee/opengemini-k8s:latest"
#      - "ghcr.io/shilinlee/opengemini-k8s:{{ .Tag }}"
#    dockerfile: ./docker/Dockerfile
#    extra_files:
#      - docker/scripts/entrypoint.sh
  - id: opengemini-server-amd64
    ids:
      - ts-server
    image_templates:
      - "opengeminidb/opengemini-server:latest-amd64"
      - "opengeminidb/opengemini-server:{{ .Tag }}-amd64"
      - "ghcr.io/shilinlee/opengemini-server:latest-amd64"
      - "ghcr.io/shilinlee/opengemini-server:{{ .Tag }}-amd64"
    use: buildx
    dockerfile: ./docker/server/Dockerfile
    build_flag_templates:
      - "--platform=linux/amd64"
    extra_files:
      - config/openGemini.singlenode.conf
      - docker/server/entrypoint.sh
  - id: opengemini-server-arm64v8
    ids:
      - ts-server
    image_templates:
      - "opengeminidb/opengemini-server:latest-arm64"
      - "opengeminidb/opengemini-server:{{ .Tag }}-arm64"
      - "ghcr.io/shilinlee/opengemini-server:latest-arm64"
      - "ghcr.io/shilinlee/opengemini-server:{{ .Tag }}-arm64"
    use: buildx
    dockerfile: ./docker/server/Dockerfile
    build_flag_templates:
      - "--platform=linux/arm64"
    extra_files:
      - config/openGemini.singlenode.conf
      - docker/server/entrypoint.sh

docker_manifests:
  - name_template: "opengeminidb/opengemini-server:latest"
    image_templates:
      - "opengeminidb/opengemini-server:latest-amd64"
      - "opengeminidb/opengemini-server:latest-arm64"
  - name_template: "opengeminidb/opengemini-server:{{ .Tag }}"
    image_templates:
      - "opengeminidb/opengemini-server:{{ .Tag }}-amd64"
      - "opengeminidb/opengemini-server:{{ .Tag }}-arm64"
  - name_template: "ghcr.io/shilinlee/opengemini-server:latest"
    image_templates:
      - "ghcr.io/shilinlee/opengemini-server:latest-amd64"
      - "ghcr.io/shilinlee/opengemini-server:latest-arm64"
  - name_template: "ghcr.io/shilinlee/opengemini-server:{{ .Tag }}"
    image_templates:
      - "ghcr.io/shilinlee/opengemini-server:{{ .Tag }}-amd64"
      - "ghcr.io/shilinlee/opengemini-server:{{ .Tag }}-arm64"