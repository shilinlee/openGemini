// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: logical_plan_codec.gen.go.tmpl

/*
Copyright 2022 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package executor

import (
	"reflect"

	"github.com/openGemini/openGemini/engine/hybridqp"
	internal "github.com/openGemini/openGemini/open_src/influx/query/proto"
)

func init() {
	logicPlanNewHandler[reflect.TypeOf(&LogicalAggregate{}).String()] = func() hybridqp.QueryNode {
		return &LogicalAggregate{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalMerge{}).String()] = func() hybridqp.QueryNode {
		return &LogicalMerge{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalSortMerge{}).String()] = func() hybridqp.QueryNode {
		return &LogicalSortMerge{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalFilter{}).String()] = func() hybridqp.QueryNode {
		return &LogicalFilter{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalDedupe{}).String()] = func() hybridqp.QueryNode {
		return &LogicalDedupe{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalInterval{}).String()] = func() hybridqp.QueryNode {
		return &LogicalInterval{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalSeries{}).String()] = func() hybridqp.QueryNode {
		return &LogicalSeries{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalReader{}).String()] = func() hybridqp.QueryNode {
		return &LogicalReader{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalTagSubset{}).String()] = func() hybridqp.QueryNode {
		return &LogicalTagSubset{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalFill{}).String()] = func() hybridqp.QueryNode {
		return &LogicalFill{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalAlign{}).String()] = func() hybridqp.QueryNode {
		return &LogicalAlign{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalMst{}).String()] = func() hybridqp.QueryNode {
		return &LogicalMst{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalProject{}).String()] = func() hybridqp.QueryNode {
		return &LogicalProject{}
	}
	logicPlanNewHandler[reflect.TypeOf(&LogicalSlidingWindow{}).String()] = func() hybridqp.QueryNode {
		return &LogicalSlidingWindow{}
	}
}

func (p *LogicalAggregate) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalAggregate) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalAggregate) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalMerge) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.inputs = inputs
}

func (p *LogicalMerge) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.inputs...)
}

func (p *LogicalMerge) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagN)
}

func (p *LogicalSortMerge) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.inputs = inputs
}

func (p *LogicalSortMerge) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.inputs...)
}

func (p *LogicalSortMerge) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagN)
}

func (p *LogicalFilter) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalFilter) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalFilter) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalDedupe) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalDedupe) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalDedupe) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalInterval) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalInterval) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalInterval) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalSeries) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
}

func (p *LogicalSeries) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, nil)
}

func (p *LogicalSeries) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagNull)
}

func (p *LogicalReader) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalReader) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalReader) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalTagSubset) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalTagSubset) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalTagSubset) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalFill) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalFill) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalFill) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalAlign) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalAlign) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalAlign) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalMst) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
}

func (p *LogicalMst) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, nil)
}

func (p *LogicalMst) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagNull)
}

func (p *LogicalProject) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalProject) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalProject) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}

func (p *LogicalSlidingWindow) SetInputs(inputs []hybridqp.QueryNode) {
	if len(inputs) == 0 {
		return
	}
	p.input = inputs[0]
}

func (p *LogicalSlidingWindow) MarshalBinary() ([]byte, error) {
	return (&QueryNodeCodec{}).Marshal(p, p.input)
}

func (p *LogicalSlidingWindow) UnmarshalBinary(pb *internal.QueryNode) error {
	return (&QueryNodeCodec{}).Unmarshal(&p.LogicalPlanBase, p, pb, inputsNumberFlagOne)
}
