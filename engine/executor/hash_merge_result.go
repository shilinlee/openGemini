// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: hash_merge_result.go.tmpl

/*
Copyright 2023 Huawei Cloud Computing Technologies Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package executor

type mergeResultCol interface {
	AppendValues(col Column, start int, end int)
	SetOutPut(col Column)
}

type mergeResult struct {
	time []int64
	cols []mergeResultCol
}

func (mr *mergeResult) AppendResult(chunk Chunk, start int, end int) {
	mr.time = append(mr.time, chunk.Time()[start:end]...)
	for i, col := range mr.cols {
		col.AppendValues(chunk.Column(i), start, end)
	}
}

type mergeResultMsg struct {
	tags   ChunkTags
	result *mergeResult
}

type mergeResultFloatCol struct {
	values  []float64
	nils    []bool
	oLoc    int
	oValLoc int
}

func NewMergeResultFloatCol() mergeResultCol {
	return &mergeResultFloatCol{
		values:  make([]float64, 0),
		nils:    make([]bool, 0),
		oLoc:    0,
		oValLoc: 0,
	}
}

func (mrfc *mergeResultFloatCol) AppendValues(col Column, start int, end int) {
	srcPoints := end - start
	if col.NilCount() != 0 {
		start, end = col.GetRangeValueIndexV2(start, end)
	}
	mrfc.values = append(mrfc.values, col.FloatValues()[start:end]...)
	dstPoints := end - start
	if dstPoints == srcPoints {
		for ; start < end; start++ {
			mrfc.nils = append(mrfc.nils, true)
		}
		return
	}
	for ; start < end; start++ {
		if col.IsNilV2(start) {
			mrfc.nils = append(mrfc.nils, false)
		} else {
			mrfc.nils = append(mrfc.nils, true)
		}
	}
}

func (mrfc *mergeResultFloatCol) SetOutPut(col Column) {
	if mrfc.nils[mrfc.oLoc] {
		col.AppendNotNil()
		col.AppendFloatValue(mrfc.values[mrfc.oValLoc])
		mrfc.oLoc++
		mrfc.oValLoc++
	} else {
		col.AppendNil()
		mrfc.oLoc++
	}
}

type mergeResultIntegerCol struct {
	values  []int64
	nils    []bool
	oLoc    int
	oValLoc int
}

func NewMergeResultIntegerCol() mergeResultCol {
	return &mergeResultIntegerCol{
		values:  make([]int64, 0),
		nils:    make([]bool, 0),
		oLoc:    0,
		oValLoc: 0,
	}
}

func (mrfc *mergeResultIntegerCol) AppendValues(col Column, start int, end int) {
	srcPoints := end - start
	if col.NilCount() != 0 {
		start, end = col.GetRangeValueIndexV2(start, end)
	}
	mrfc.values = append(mrfc.values, col.IntegerValues()[start:end]...)
	dstPoints := end - start
	if dstPoints == srcPoints {
		for ; start < end; start++ {
			mrfc.nils = append(mrfc.nils, true)
		}
		return
	}
	for ; start < end; start++ {
		if col.IsNilV2(start) {
			mrfc.nils = append(mrfc.nils, false)
		} else {
			mrfc.nils = append(mrfc.nils, true)
		}
	}
}

func (mrfc *mergeResultIntegerCol) SetOutPut(col Column) {
	if mrfc.nils[mrfc.oLoc] {
		col.AppendNotNil()
		col.AppendIntegerValue(mrfc.values[mrfc.oValLoc])
		mrfc.oLoc++
		mrfc.oValLoc++
	} else {
		col.AppendNil()
		mrfc.oLoc++
	}
}

type mergeResultBooleanCol struct {
	values  []bool
	nils    []bool
	oLoc    int
	oValLoc int
}

func NewMergeResultBooleanCol() mergeResultCol {
	return &mergeResultBooleanCol{
		values:  make([]bool, 0),
		nils:    make([]bool, 0),
		oLoc:    0,
		oValLoc: 0,
	}
}

func (mrfc *mergeResultBooleanCol) AppendValues(col Column, start int, end int) {
	srcPoints := end - start
	if col.NilCount() != 0 {
		start, end = col.GetRangeValueIndexV2(start, end)
	}
	mrfc.values = append(mrfc.values, col.BooleanValues()[start:end]...)
	dstPoints := end - start
	if dstPoints == srcPoints {
		for ; start < end; start++ {
			mrfc.nils = append(mrfc.nils, true)
		}
		return
	}
	for ; start < end; start++ {
		if col.IsNilV2(start) {
			mrfc.nils = append(mrfc.nils, false)
		} else {
			mrfc.nils = append(mrfc.nils, true)
		}
	}
}

func (mrfc *mergeResultBooleanCol) SetOutPut(col Column) {
	if mrfc.nils[mrfc.oLoc] {
		col.AppendNotNil()
		col.AppendBooleanValue(mrfc.values[mrfc.oValLoc])
		mrfc.oLoc++
		mrfc.oValLoc++
	} else {
		col.AppendNil()
		mrfc.oLoc++
	}
}

type mergeResultStringCol struct {
	values  []string
	nils    []bool
	oLoc    int
	oValLoc int
}

func NewMergeResultStringCol() mergeResultCol {
	return &mergeResultStringCol{
		values:  make([]string, 0),
		nils:    make([]bool, 0),
		oLoc:    0,
		oValLoc: 0,
	}
}

func (mrfc *mergeResultStringCol) AppendValues(col Column, start int, end int) {
	srcPoints := end - start
	if col.NilCount() != 0 {
		start, end = col.GetRangeValueIndexV2(start, end)
	}
	mrfc.values = col.StringValuesRangeV2(mrfc.values, start, end)
	dstPoints := end - start
	if dstPoints == srcPoints {
		for ; start < end; start++ {
			mrfc.nils = append(mrfc.nils, true)
		}
		return
	}
	for ; start < end; start++ {
		if col.IsNilV2(start) {
			mrfc.nils = append(mrfc.nils, false)
		} else {
			mrfc.nils = append(mrfc.nils, true)
		}
	}
}

func (mrfc *mergeResultStringCol) SetOutPut(col Column) {
	if mrfc.nils[mrfc.oLoc] {
		col.AppendNotNil()
		col.AppendStringValue(mrfc.values[mrfc.oValLoc])
		mrfc.oLoc++
		mrfc.oValLoc++
	} else {
		col.AppendNil()
		mrfc.oLoc++
	}
}
